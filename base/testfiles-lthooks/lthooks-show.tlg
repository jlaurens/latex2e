This is a generated file for the l3build validation system.
Don't change this file in any respect.
============================================================
TEST 1: \ShowHook output
============================================================
PASSED
PASSED
PASSED
PASSED
============================================================
============================================================
TEST 2: <<<<<<<<<< Compare old \ShowHook versus new \ShowHook 
============================================================
============================================================
TEST 3: <<<<< UNDECLARED
============================================================
============================================================
TEST 4: RAW
============================================================
-> The hook 'UNDECLARED HOOK':
> The hook is not declared.
> The hook is empty.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
==> Hook: 'UNDECLARED HOOK'
>   not declared.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
PASSED
============================================================
============================================================
TEST 5: + TOP LEVEL
============================================================
-> The hook 'UNDECLARED HOOK':
> The hook is not declared.
> Code chunks:
>     ---
> Document-level (top-level) code:
>     -> \typeout {<TOP-LEVEL>}
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     Not set because the hook is undeclared.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
==> Hook: 'UNDECLARED HOOK'
>   not declared
> Code chunks:
>   'top-level' -> \typeout {<TOP-LEVEL>}
> No execution.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
PASSED
PASSED
PASSED
============================================================
============================================================
TEST 6: + LABEL A
============================================================
-> The hook 'UNDECLARED HOOK':
> The hook is not declared.
> Code chunks:
>     LABEL A -> \typeout {<CODE A>}
> Document-level (top-level) code:
>     -> \typeout {<TOP-LEVEL>}
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     Not set because the hook is undeclared.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
==> Hook: 'UNDECLARED HOOK'
>   not declared
> Code chunks:
>   'LABEL A' -> \typeout {<CODE A>}
>   'top-level' -> \typeout {<TOP-LEVEL>}
> No execution.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
PASSED
PASSED
============================================================
============================================================
TEST 7: + LABEL B
============================================================
-> The hook 'UNDECLARED HOOK':
> The hook is not declared.
> Code chunks:
>     LABEL A -> \typeout {<CODE A>}
>     LABEL B -> \typeout {<CODE B>}
> Document-level (top-level) code:
>     -> \typeout {<TOP-LEVEL>}
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     Not set because the hook is undeclared.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
==> Hook: 'UNDECLARED HOOK'
>   not declared
> Code chunks:
>   'LABEL A' -> \typeout {<CODE A>}
>   'LABEL B' -> \typeout {<CODE B>}
>   'top-level' -> \typeout {<TOP-LEVEL>}
> No execution.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
PASSED
PASSED
============================================================
============================================================
TEST 8: + LABEL C
============================================================
-> The hook 'UNDECLARED HOOK':
> The hook is not declared.
> Code chunks:
>     LABEL A -> \typeout {<CODE A>}
>     LABEL B -> \typeout {<CODE B>}
>     LABEL C -> \typeout {<CODE C>}
> Document-level (top-level) code:
>     -> \typeout {<TOP-LEVEL>}
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     Not set because the hook is undeclared.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
==> Hook: 'UNDECLARED HOOK'
>   not declared
> Code chunks:
>   'LABEL A' -> \typeout {<CODE A>}
>   'LABEL B' -> \typeout {<CODE B>}
>   'LABEL C' -> \typeout {<CODE C>}
>   'top-level' -> \typeout {<TOP-LEVEL>}
> No execution.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
PASSED
PASSED
============================================================
============================================================
TEST 9: + NEXT
============================================================
-> The hook 'UNDECLARED HOOK':
> The hook is not declared.
> Code chunks:
>     LABEL A -> \typeout {<CODE A>}
>     LABEL B -> \typeout {<CODE B>}
>     LABEL C -> \typeout {<CODE C>}
> Document-level (top-level) code:
>     -> \typeout {<TOP-LEVEL>}
> Extra code for next invocation:
>     -> \typeout {<NEXT-ONLY>}
> Rules:
>     ---
> Execution order:
>     Not set because the hook is undeclared.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
==> Hook: 'UNDECLARED HOOK'
>   not declared
> Code chunks:
>   'LABEL A' -> \typeout {<CODE A>}
>   'LABEL B' -> \typeout {<CODE B>}
>   'LABEL C' -> \typeout {<CODE C>}
>   'top-level' -> \typeout {<TOP-LEVEL>}
>   next-only -> \typeout {<NEXT-ONLY>}
> No execution.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
PASSED
PASSED
============================================================
============================================================
TEST 10: LABEL C < LABEL A
============================================================
-> The hook 'UNDECLARED HOOK':
> The hook is not declared.
> Code chunks:
>     LABEL A -> \typeout {<CODE A>}
>     LABEL B -> \typeout {<CODE B>}
>     LABEL C -> \typeout {<CODE C>}
> Document-level (top-level) code:
>     -> \typeout {<TOP-LEVEL>}
> Extra code for next invocation:
>     -> \typeout {<NEXT-ONLY>}
> Rules:
>     LABEL C|LABEL A with relation <
> Execution order:
>     Not set because the hook is undeclared.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
==> Hook: 'UNDECLARED HOOK'
>   not declared
> Code chunks:
>   'LABEL A' -> \typeout {<CODE A>}
>   'LABEL B' -> \typeout {<CODE B>}
>   'LABEL C' -> \typeout {<CODE C>}
>   'top-level' -> \typeout {<TOP-LEVEL>}
>   next-only -> \typeout {<NEXT-ONLY>}
> Rules:
>   'LABEL C' before 'LABEL A'
> No execution.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
PASSED
PASSED
PASSED
PASSED
============================================================
============================================================
TEST 11: DEFAULT LABEL B > LABEL C
============================================================
-> The hook 'UNDECLARED HOOK':
> The hook is not declared.
> Code chunks:
>     LABEL A -> \typeout {<CODE A>}
>     LABEL B -> \typeout {<CODE B>}
>     LABEL C -> \typeout {<CODE C>}
> Document-level (top-level) code:
>     -> \typeout {<TOP-LEVEL>}
> Extra code for next invocation:
>     -> \typeout {<NEXT-ONLY>}
> Rules:
>     LABEL C|LABEL A with relation <
>     LABEL C|LABEL B with default relation <
> Execution order:
>     Not set because the hook is undeclared.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
==> Hook: 'UNDECLARED HOOK'
>   not declared
> Code chunks:
>   'LABEL A' -> \typeout {<CODE A>}
>   'LABEL B' -> \typeout {<CODE B>}
>   'LABEL C' -> \typeout {<CODE C>}
>   'top-level' -> \typeout {<TOP-LEVEL>}
>   next-only -> \typeout {<NEXT-ONLY>}
> Default rules:
>   'LABEL C' before 'LABEL B'
> Rules:
>   'LABEL C' before 'LABEL A'
> No execution.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
PASSED
PASSED
============================================================
>>>>> UNDECLARED HOOK
============================================================
============================================================
TEST 12: <<<<< DECLARED HOOK
============================================================
============================================================
TEST 13: EMPTY
============================================================
-> The hook 'DECLARED HOOK':
> The hook is empty.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
==> Hook: 'DECLARED HOOK'
>   empty.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
============================================================
============================================================
TEST 14: + TOP LEVEL
============================================================
-> The hook 'DECLARED HOOK':
> Code chunks:
>     ---
> Document-level (top-level) code (executed last):
>     -> \typeout {<TOP-LEVEL>}
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     ---.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
==> Hook: 'DECLARED HOOK'
> Code chunks:
>   'top-level' -> \typeout {<TOP-LEVEL>}
> Execution order:
>   1: 'top-level'.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
<TOP-LEVEL>
============================================================
============================================================
TEST 15: + LABEL A
============================================================
-> The hook 'DECLARED HOOK':
> Code chunks:
>     LABEL A -> \typeout {<CODE A>}
> Document-level (top-level) code (executed last):
>     -> \typeout {<TOP-LEVEL>}
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     LABEL A.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
==> Hook: 'DECLARED HOOK'
> Code chunks:
>   'LABEL A' -> \typeout {<CODE A>}
>   'top-level' -> \typeout {<TOP-LEVEL>}
> Execution order:
>   1: 'LABEL A'
>   2: 'top-level'.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
<CODE A>
<TOP-LEVEL>
============================================================
============================================================
TEST 16: + LABEL B
============================================================
-> The hook 'DECLARED HOOK':
> Code chunks:
>     LABEL A -> \typeout {<CODE A>}
>     LABEL B -> \typeout {<CODE B>}
> Document-level (top-level) code (executed last):
>     -> \typeout {<TOP-LEVEL>}
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     LABEL A, LABEL B.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
==> Hook: 'DECLARED HOOK'
> Code chunks:
>   'LABEL A' -> \typeout {<CODE A>}
>   'LABEL B' -> \typeout {<CODE B>}
>   'top-level' -> \typeout {<TOP-LEVEL>}
> Execution order:
>   1: 'LABEL A'
>   2: 'LABEL B'
>   3: 'top-level'.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
<CODE A>
<CODE B>
<TOP-LEVEL>
============================================================
============================================================
TEST 17: + LABEL C
============================================================
-> The hook 'DECLARED HOOK':
> Code chunks:
>     LABEL A -> \typeout {<CODE A>}
>     LABEL B -> \typeout {<CODE B>}
>     LABEL C -> \typeout {<CODE C>}
> Document-level (top-level) code (executed last):
>     -> \typeout {<TOP-LEVEL>}
> Extra code for next invocation:
>     ---
> Rules:
>     LABEL C|LABEL B with default relation <
> Execution order (after applying rules):
>     LABEL A, LABEL C, LABEL B.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
==> Hook: 'DECLARED HOOK'
> Code chunks:
>   'LABEL A' -> \typeout {<CODE A>}
>   'LABEL B' -> \typeout {<CODE B>}
>   'LABEL C' -> \typeout {<CODE C>}
>   'top-level' -> \typeout {<TOP-LEVEL>}
> Default rules:
>   'LABEL C' before 'LABEL B'
> Execution order:
>   1: 'LABEL A'
>   2: 'LABEL C'
>   3: 'LABEL B'
>   4: 'top-level'.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
<CODE A>
<CODE C>
<CODE B>
<TOP-LEVEL>
============================================================
============================================================
TEST 18: + NEXT
============================================================
-> The hook 'DECLARED HOOK':
> Code chunks:
>     LABEL A -> \typeout {<CODE A>}
>     LABEL B -> \typeout {<CODE B>}
>     LABEL C -> \typeout {<CODE C>}
> Document-level (top-level) code (executed last):
>     -> \typeout {<TOP-LEVEL>}
> Extra code for next invocation:
>     -> \typeout {<NEXT-ONLY>}
> Rules:
>     LABEL C|LABEL B with default relation <
> Execution order (after applying rules):
>     LABEL A, LABEL C, LABEL B.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
==> Hook: 'DECLARED HOOK'
> Code chunks:
>   'LABEL A' -> \typeout {<CODE A>}
>   'LABEL B' -> \typeout {<CODE B>}
>   'LABEL C' -> \typeout {<CODE C>}
>   'top-level' -> \typeout {<TOP-LEVEL>}
>   next-only -> \typeout {<NEXT-ONLY>}
> Default rules:
>   'LABEL C' before 'LABEL B'
> Execution order:
>   1: 'LABEL A'
>   2: 'LABEL C'
>   3: 'LABEL B'
>   4: 'top-level'
>   5: next-only.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
<CODE A>
<CODE C>
<CODE B>
<TOP-LEVEL>
<NEXT-ONLY>
============================================================
============================================================
TEST 19: LABEL C < LABEL A
============================================================
-> The hook 'DECLARED HOOK':
> Code chunks:
>     LABEL A -> \typeout {<CODE A>}
>     LABEL B -> \typeout {<CODE B>}
>     LABEL C -> \typeout {<CODE C>}
> Document-level (top-level) code (executed last):
>     -> \typeout {<TOP-LEVEL>}
> Extra code for next invocation:
>     ---
> Rules:
>     LABEL C|LABEL A with relation <
>     LABEL C|LABEL B with default relation <
> Execution order (after applying rules):
>     LABEL C, LABEL A, LABEL B.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
==> Hook: 'DECLARED HOOK'
> Code chunks:
>   'LABEL A' -> \typeout {<CODE A>}
>   'LABEL B' -> \typeout {<CODE B>}
>   'LABEL C' -> \typeout {<CODE C>}
>   'top-level' -> \typeout {<TOP-LEVEL>}
> Default rules:
>   'LABEL C' before 'LABEL B'
> Rules:
>   'LABEL C' before 'LABEL A'
> Execution order:
>   1: 'LABEL C'
>   2: 'LABEL A'
>   3: 'LABEL B'
>   4: 'top-level'.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
<CODE C>
<CODE A>
<CODE B>
<TOP-LEVEL>
============================================================
============================================================
TEST 20: DEFAULT LABEL B > LABEL C
============================================================
-> The hook 'DECLARED HOOK':
> Code chunks:
>     LABEL A -> \typeout {<CODE A>}
>     LABEL B -> \typeout {<CODE B>}
>     LABEL C -> \typeout {<CODE C>}
> Document-level (top-level) code (executed last):
>     -> \typeout {<TOP-LEVEL>}
> Extra code for next invocation:
>     ---
> Rules:
>     LABEL C|LABEL A with relation <
>     LABEL C|LABEL B with default relation <
> Execution order (after applying rules):
>     LABEL C, LABEL A, LABEL B.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
==> Hook: 'DECLARED HOOK'
> Code chunks:
>   'LABEL A' -> \typeout {<CODE A>}
>   'LABEL B' -> \typeout {<CODE B>}
>   'LABEL C' -> \typeout {<CODE C>}
>   'top-level' -> \typeout {<TOP-LEVEL>}
> Default rules:
>   'LABEL C' before 'LABEL B'
> Rules:
>   'LABEL C' before 'LABEL A'
> Execution order:
>   1: 'LABEL C'
>   2: 'LABEL A'
>   3: 'LABEL B'
>   4: 'top-level'.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
<CODE C>
<CODE A>
<CODE B>
<TOP-LEVEL>
============================================================
>>>>> DECLARED HOOK
============================================================
============================================================
TEST 21: <<<<< DECLARED REVERSED
============================================================
============================================================
TEST 22: RAW
============================================================
-> The hook 'DECLARED REVERSED':
> The hook is empty.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
==> Hook: 'DECLARED REVERSED'
>   reversed.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
============================================================
============================================================
TEST 23: + TOP LEVEL
============================================================
-> The hook 'DECLARED REVERSED':
> Code chunks:
>     ---
> Document-level (top-level) code (executed first):
>     -> \typeout {<TOP-LEVEL>}
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order (after reversal):
>     ---.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
==> Hook: 'DECLARED REVERSED'
>   reversed
> Code chunks:
>   'top-level' -> \typeout {<TOP-LEVEL>}
> Execution order:
>   1: 'top-level'.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
<TOP-LEVEL>
============================================================
============================================================
TEST 24: + LABEL A
============================================================
-> The hook 'DECLARED REVERSED':
> Code chunks:
>     LABEL A -> \typeout {<CODE A>}
> Document-level (top-level) code (executed first):
>     -> \typeout {<TOP-LEVEL>}
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order (after reversal):
>     LABEL A.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
==> Hook: 'DECLARED REVERSED'
>   reversed
> Code chunks:
>   'LABEL A' -> \typeout {<CODE A>}
>   'top-level' -> \typeout {<TOP-LEVEL>}
> Execution order:
>   1: 'top-level'
>   2: 'LABEL A'.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
<TOP-LEVEL>
<CODE A>
============================================================
============================================================
TEST 25: + LABEL B
============================================================
-> The hook 'DECLARED REVERSED':
> Code chunks:
>     LABEL A -> \typeout {<CODE A>}
>     LABEL B -> \typeout {<CODE B>}
> Document-level (top-level) code (executed first):
>     -> \typeout {<TOP-LEVEL>}
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order (after reversal):
>     LABEL B, LABEL A.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
==> Hook: 'DECLARED REVERSED'
>   reversed
> Code chunks:
>   'LABEL A' -> \typeout {<CODE A>}
>   'LABEL B' -> \typeout {<CODE B>}
>   'top-level' -> \typeout {<TOP-LEVEL>}
> Execution order:
>   1: 'top-level'
>   2: 'LABEL B'
>   3: 'LABEL A'.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
<TOP-LEVEL>
<CODE B>
<CODE A>
============================================================
============================================================
TEST 26: + LABEL C
============================================================
-> The hook 'DECLARED REVERSED':
> Code chunks:
>     LABEL A -> \typeout {<CODE A>}
>     LABEL B -> \typeout {<CODE B>}
>     LABEL C -> \typeout {<CODE C>}
> Document-level (top-level) code (executed first):
>     -> \typeout {<TOP-LEVEL>}
> Extra code for next invocation:
>     ---
> Rules:
>     LABEL C|LABEL B with default relation <
> Execution order (after reversal and applying rules):
>     LABEL B, LABEL C, LABEL A.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
==> Hook: 'DECLARED REVERSED'
>   reversed
> Code chunks:
>   'LABEL A' -> \typeout {<CODE A>}
>   'LABEL B' -> \typeout {<CODE B>}
>   'LABEL C' -> \typeout {<CODE C>}
>   'top-level' -> \typeout {<TOP-LEVEL>}
> Default rules, to be mirrored:
>   'LABEL C' before 'LABEL B'
> Execution order:
>   1: 'top-level'
>   2: 'LABEL B'
>   3: 'LABEL C'
>   4: 'LABEL A'.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
<TOP-LEVEL>
<CODE B>
<CODE C>
<CODE A>
============================================================
============================================================
TEST 27: + NEXT
============================================================
-> The hook 'DECLARED REVERSED':
> Code chunks:
>     LABEL A -> \typeout {<CODE A>}
>     LABEL B -> \typeout {<CODE B>}
>     LABEL C -> \typeout {<CODE C>}
> Document-level (top-level) code (executed first):
>     -> \typeout {<TOP-LEVEL>}
> Extra code for next invocation:
>     -> \typeout {<NEXT-ONLY>}
> Rules:
>     LABEL C|LABEL B with default relation <
> Execution order (after reversal and applying rules):
>     LABEL B, LABEL C, LABEL A.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
==> Hook: 'DECLARED REVERSED'
>   reversed
> Code chunks:
>   'LABEL A' -> \typeout {<CODE A>}
>   'LABEL B' -> \typeout {<CODE B>}
>   'LABEL C' -> \typeout {<CODE C>}
>   'top-level' -> \typeout {<TOP-LEVEL>}
>   next-only -> \typeout {<NEXT-ONLY>}
> Default rules, to be mirrored:
>   'LABEL C' before 'LABEL B'
> Execution order:
>   1: 'top-level'
>   2: 'LABEL B'
>   3: 'LABEL C'
>   4: 'LABEL A'
>   5: next-only.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
<TOP-LEVEL>
<CODE B>
<CODE C>
<CODE A>
<NEXT-ONLY>
============================================================
============================================================
TEST 28: + LABEL C < LABEL A
============================================================
-> The hook 'DECLARED REVERSED':
> Code chunks:
>     LABEL A -> \typeout {<CODE A>}
>     LABEL B -> \typeout {<CODE B>}
>     LABEL C -> \typeout {<CODE C>}
> Document-level (top-level) code (executed first):
>     -> \typeout {<TOP-LEVEL>}
> Extra code for next invocation:
>     ---
> Rules:
>     LABEL C|LABEL A with relation <
>     LABEL C|LABEL B with default relation <
> Execution order (after reversal and applying rules):
>     LABEL B, LABEL C, LABEL A.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
==> Hook: 'DECLARED REVERSED'
>   reversed
> Code chunks:
>   'LABEL A' -> \typeout {<CODE A>}
>   'LABEL B' -> \typeout {<CODE B>}
>   'LABEL C' -> \typeout {<CODE C>}
>   'top-level' -> \typeout {<TOP-LEVEL>}
> Default rules, to be mirrored:
>   'LABEL C' before 'LABEL B'
> Rules:
>   'LABEL C' before 'LABEL A'
> Execution order:
>   1: 'top-level'
>   2: 'LABEL B'
>   3: 'LABEL C'
>   4: 'LABEL A'.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
<TOP-LEVEL>
<CODE B>
<CODE C>
<CODE A>
============================================================
============================================================
TEST 29: + DEFAULT LABEL B > LABEL C
============================================================
-> The hook 'DECLARED REVERSED':
> Code chunks:
>     LABEL A -> \typeout {<CODE A>}
>     LABEL B -> \typeout {<CODE B>}
>     LABEL C -> \typeout {<CODE C>}
> Document-level (top-level) code (executed first):
>     -> \typeout {<TOP-LEVEL>}
> Extra code for next invocation:
>     ---
> Rules:
>     LABEL C|LABEL A with relation <
>     LABEL C|LABEL B with default relation <
> Execution order (after reversal and applying rules):
>     LABEL B, LABEL C, LABEL A.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
==> Hook: 'DECLARED REVERSED'
>   reversed
> Code chunks:
>   'LABEL A' -> \typeout {<CODE A>}
>   'LABEL B' -> \typeout {<CODE B>}
>   'LABEL C' -> \typeout {<CODE C>}
>   'top-level' -> \typeout {<TOP-LEVEL>}
> Default rules, to be mirrored:
>   'LABEL C' before 'LABEL B'
> Rules:
>   'LABEL C' before 'LABEL A'
> Execution order:
>   1: 'top-level'
>   2: 'LABEL B'
>   3: 'LABEL C'
>   4: 'LABEL A'.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
<TOP-LEVEL>
<CODE B>
<CODE C>
<CODE A>
============================================================
>>>>> DECLARED REVERSED
============================================================
============================================================
TEST 30: ENVIRONMENT
============================================================
-> The generic hook 'env/lthooks.regression test/before':
> The hook is not declared.
> The hook is empty.
<recently read> }
l. ......eShow{env/lthooks.regression test/before}
==> Hook: 'env/lthooks.regression test/before'
>   builtin generic.
<recently read> }
l. ......eShow{env/lthooks.regression test/before}
-> The generic hook 'env/lthooks.regression test/after':
> The hook is not declared.
> The hook is empty.
<recently read> }
l. ......reShow{env/lthooks.regression test/after}
==> Hook: 'env/lthooks.regression test/after'
>   builtin generic.
<recently read> }
l. ......reShow{env/lthooks.regression test/after}
-> The generic hook 'env/lthooks.regression test/before':
> The hook is not declared.
> The hook is empty.
<recently read> }
l. ......eShow{env/lthooks.regression test/before}
==> Hook: 'env/lthooks.regression test/before'
>   builtin generic.
<recently read> }
l. ......eShow{env/lthooks.regression test/before}
-> The generic hook 'env/lthooks.regression test/after':
> The hook is not declared.
> The hook is empty.
<recently read> }
l. ......reShow{env/lthooks.regression test/after}
==> Hook: 'env/lthooks.regression test/after'
>   builtin generic.
<recently read> }
l. ......reShow{env/lthooks.regression test/after}
-> The generic hook 'env/lthooks.regression test/before':
> Code chunks:
>     ---
> Document-level (top-level) code (executed last):
>     -> \typeout {<BEFORE>}
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     ---.
<recently read> }
l. ......eShow{env/lthooks.regression test/before}
==> Hook: 'env/lthooks.regression test/before'
>   builtin generic
> Code chunks:
>   'top-level' -> \typeout {<BEFORE>}
> Execution order:
>   1: 'top-level'.
<recently read> }
l. ......eShow{env/lthooks.regression test/before}
<BEFORE>
-> The generic hook 'env/lthooks.regression test/after':
> Code chunks:
>     ---
> Document-level (top-level) code (executed first):
>     -> \typeout {<AFTER>}
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order (after reversal):
>     ---.
<recently read> }
l. ......reShow{env/lthooks.regression test/after}
==> Hook: 'env/lthooks.regression test/after'
>   builtin generic, reversed
> Code chunks:
>   'top-level' -> \typeout {<AFTER>}
> Execution order:
>   1: 'top-level'.
<recently read> }
l. ......reShow{env/lthooks.regression test/after}
<AFTER>
============================================================
============================================================
TEST 31: GENERIC HOOK
============================================================
-> The hook 'GENERIC HOOK':
> The hook is not declared.
> The hook is empty.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
==> Hook: 'GENERIC HOOK'
>   not declared.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
-> The hook 'GENERIC HOOK':
> The hook is not declared.
> Code chunks:
>     LABEL -> \typeout {<CODE>}
> Document-level (top-level) code:
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     Not set because the hook is undeclared.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
==> Hook: 'GENERIC HOOK'
>   not declared
> Code chunks:
>   'LABEL' -> \typeout {<CODE>}
> No execution.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
-> The hook 'GENERIC HOOK':
> Code chunks:
>     LABEL -> \typeout {<CODE>}
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     LABEL.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
==> Hook: 'GENERIC HOOK'
> Code chunks:
>   'LABEL' -> \typeout {<CODE>}
> Execution order:
>   1: 'LABEL'.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
<CODE>
-> The hook 'GENERIC HOOK':
> The hook is not declared.
> The hook is disabled.
> Code chunks:
>     LABEL -> \typeout {<CODE>}
> Document-level (top-level) code:
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     Not set because the hook is disabled.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
==> Hook: 'GENERIC HOOK'
>   not declared, disabled
> Code chunks:
>   'LABEL' -> \typeout {<CODE>}
> No execution.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
============================================================
============================================================
TEST 32: HOOK WITH ARGUMENTS
============================================================
-> The hook 'HOOK WITH ARGUMENTS':
> The hook is not declared.
> The hook is empty.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
==> Hook: 'HOOK WITH ARGUMENTS'
>   not declared.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
-> The hook 'HOOK WITH ARGUMENTS' (2 arguments):
> The hook is empty.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
==> Hook: 'HOOK WITH ARGUMENTS'
>   2 arguments.
<recently read> }
l. ...\TESTLHXCompareShow{\TESTHook}
============================================================
============================================================
TEST 33: <<<<< RULES
============================================================
============================================================
TEST 34: LABEL A <relation> top-level
============================================================
============================================================
=== <relation> <- before
-> The hook 'RULES HOOK':
> Code chunks:
>     LABEL A -> \typeout {<CODE A>}
>     LABEL B -> \typeout {<CODE B>}
>     LABEL C -> \typeout {<CODE C>}
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     LABEL C|LABEL B with default relation <
> Execution order (after applying rules):
>     LABEL A, LABEL C, LABEL B.
<recently read> }
l. ...\TEST{LABEL A}{top-level}
==> Hook: 'RULES HOOK'
> Code chunks:
>   'LABEL A' -> \typeout {<CODE A>}
>   'LABEL B' -> \typeout {<CODE B>}
>   'LABEL C' -> \typeout {<CODE C>}
> Default rules:
>   'LABEL C' before 'LABEL B'
> Execution order:
>   1: 'LABEL A'
>   2: 'LABEL C'
>   3: 'LABEL B'.
<recently read> }
l. ...\TEST{LABEL A}{top-level}
<CODE A>
<CODE C>
<CODE B>
============================================================
=== <relation> <- after
-> The hook 'RULES HOOK':
> Code chunks:
>     LABEL A -> \typeout {<CODE A>}
>     LABEL B -> \typeout {<CODE B>}
>     LABEL C -> \typeout {<CODE C>}
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     LABEL C|LABEL B with default relation <
> Execution order (after applying rules):
>     LABEL A, LABEL C, LABEL B.
<recently read> }
l. ...\TEST{LABEL A}{top-level}
==> Hook: 'RULES HOOK'
> Code chunks:
>   'LABEL A' -> \typeout {<CODE A>}
>   'LABEL B' -> \typeout {<CODE B>}
>   'LABEL C' -> \typeout {<CODE C>}
> Default rules:
>   'LABEL C' before 'LABEL B'
> Execution order:
>   1: 'LABEL A'
>   2: 'LABEL C'
>   3: 'LABEL B'.
<recently read> }
l. ...\TEST{LABEL A}{top-level}
<CODE A>
<CODE C>
<CODE B>
============================================================
=== <relation> <- unrelated
-> The hook 'RULES HOOK':
> Code chunks:
>     LABEL A -> \typeout {<CODE A>}
>     LABEL B -> \typeout {<CODE B>}
>     LABEL C -> \typeout {<CODE C>}
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     LABEL C|LABEL B with default relation <
> Execution order (after applying rules):
>     LABEL A, LABEL C, LABEL B.
<recently read> }
l. ...\TEST{LABEL A}{top-level}
==> Hook: 'RULES HOOK'
> Code chunks:
>   'LABEL A' -> \typeout {<CODE A>}
>   'LABEL B' -> \typeout {<CODE B>}
>   'LABEL C' -> \typeout {<CODE C>}
> Default rules:
>   'LABEL C' before 'LABEL B'
> Execution order:
>   1: 'LABEL A'
>   2: 'LABEL C'
>   3: 'LABEL B'.
<recently read> }
l. ...\TEST{LABEL A}{top-level}
<CODE A>
<CODE C>
<CODE B>
============================================================
=== <relation> <- incompatible-warning
-> The hook 'RULES HOOK':
> Code chunks:
>     LABEL A -> \typeout {<CODE A>}
>     LABEL B -> \typeout {<CODE B>}
>     LABEL C -> \typeout {<CODE C>}
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     LABEL C|LABEL B with default relation <
> Execution order (after applying rules):
>     LABEL A, LABEL C, LABEL B.
<recently read> }
l. ...\TEST{LABEL A}{top-level}
==> Hook: 'RULES HOOK'
> Code chunks:
>   'LABEL A' -> \typeout {<CODE A>}
>   'LABEL B' -> \typeout {<CODE B>}
>   'LABEL C' -> \typeout {<CODE C>}
> Default rules:
>   'LABEL C' before 'LABEL B'
> Execution order:
>   1: 'LABEL A'
>   2: 'LABEL C'
>   3: 'LABEL B'.
<recently read> }
l. ...\TEST{LABEL A}{top-level}
<CODE A>
<CODE C>
<CODE B>
============================================================
=== <relation> <- incompatible-error
-> The hook 'RULES HOOK':
> Code chunks:
>     LABEL A -> \typeout {<CODE A>}
>     LABEL B -> \typeout {<CODE B>}
>     LABEL C -> \typeout {<CODE C>}
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     LABEL C|LABEL B with default relation <
> Execution order (after applying rules):
>     LABEL A, LABEL C, LABEL B.
<recently read> }
l. ...\TEST{LABEL A}{top-level}
==> Hook: 'RULES HOOK'
> Code chunks:
>   'LABEL A' -> \typeout {<CODE A>}
>   'LABEL B' -> \typeout {<CODE B>}
>   'LABEL C' -> \typeout {<CODE C>}
> Default rules:
>   'LABEL C' before 'LABEL B'
> Execution order:
>   1: 'LABEL A'
>   2: 'LABEL C'
>   3: 'LABEL B'.
<recently read> }
l. ...\TEST{LABEL A}{top-level}
<CODE A>
<CODE C>
<CODE B>
============================================================
============================================================
TEST 35: top-level <relation> LABEL B
============================================================
============================================================
=== <relation> <- before
-> The hook 'RULES HOOK':
> Code chunks:
>     LABEL A -> \typeout {<CODE A>}
>     LABEL B -> \typeout {<CODE B>}
>     LABEL C -> \typeout {<CODE C>}
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     LABEL C|LABEL B with default relation <
> Execution order (after applying rules):
>     LABEL A, LABEL C, LABEL B.
<recently read> }
l. ...\TEST{top-level}{LABEL B}
==> Hook: 'RULES HOOK'
> Code chunks:
>   'LABEL A' -> \typeout {<CODE A>}
>   'LABEL B' -> \typeout {<CODE B>}
>   'LABEL C' -> \typeout {<CODE C>}
> Default rules:
>   'LABEL C' before 'LABEL B'
> Execution order:
>   1: 'LABEL A'
>   2: 'LABEL C'
>   3: 'LABEL B'.
<recently read> }
l. ...\TEST{top-level}{LABEL B}
<CODE A>
<CODE C>
<CODE B>
============================================================
=== <relation> <- after
-> The hook 'RULES HOOK':
> Code chunks:
>     LABEL A -> \typeout {<CODE A>}
>     LABEL B -> \typeout {<CODE B>}
>     LABEL C -> \typeout {<CODE C>}
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     LABEL C|LABEL B with default relation <
> Execution order (after applying rules):
>     LABEL A, LABEL C, LABEL B.
<recently read> }
l. ...\TEST{top-level}{LABEL B}
==> Hook: 'RULES HOOK'
> Code chunks:
>   'LABEL A' -> \typeout {<CODE A>}
>   'LABEL B' -> \typeout {<CODE B>}
>   'LABEL C' -> \typeout {<CODE C>}
> Default rules:
>   'LABEL C' before 'LABEL B'
> Execution order:
>   1: 'LABEL A'
>   2: 'LABEL C'
>   3: 'LABEL B'.
<recently read> }
l. ...\TEST{top-level}{LABEL B}
<CODE A>
<CODE C>
<CODE B>
============================================================
=== <relation> <- unrelated
-> The hook 'RULES HOOK':
> Code chunks:
>     LABEL A -> \typeout {<CODE A>}
>     LABEL B -> \typeout {<CODE B>}
>     LABEL C -> \typeout {<CODE C>}
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     LABEL C|LABEL B with default relation <
> Execution order (after applying rules):
>     LABEL A, LABEL C, LABEL B.
<recently read> }
l. ...\TEST{top-level}{LABEL B}
==> Hook: 'RULES HOOK'
> Code chunks:
>   'LABEL A' -> \typeout {<CODE A>}
>   'LABEL B' -> \typeout {<CODE B>}
>   'LABEL C' -> \typeout {<CODE C>}
> Default rules:
>   'LABEL C' before 'LABEL B'
> Execution order:
>   1: 'LABEL A'
>   2: 'LABEL C'
>   3: 'LABEL B'.
<recently read> }
l. ...\TEST{top-level}{LABEL B}
<CODE A>
<CODE C>
<CODE B>
============================================================
=== <relation> <- incompatible-warning
-> The hook 'RULES HOOK':
> Code chunks:
>     LABEL A -> \typeout {<CODE A>}
>     LABEL B -> \typeout {<CODE B>}
>     LABEL C -> \typeout {<CODE C>}
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     LABEL C|LABEL B with default relation <
> Execution order (after applying rules):
>     LABEL A, LABEL C, LABEL B.
<recently read> }
l. ...\TEST{top-level}{LABEL B}
==> Hook: 'RULES HOOK'
> Code chunks:
>   'LABEL A' -> \typeout {<CODE A>}
>   'LABEL B' -> \typeout {<CODE B>}
>   'LABEL C' -> \typeout {<CODE C>}
> Default rules:
>   'LABEL C' before 'LABEL B'
> Execution order:
>   1: 'LABEL A'
>   2: 'LABEL C'
>   3: 'LABEL B'.
<recently read> }
l. ...\TEST{top-level}{LABEL B}
<CODE A>
<CODE C>
<CODE B>
============================================================
=== <relation> <- incompatible-error
-> The hook 'RULES HOOK':
> Code chunks:
>     LABEL A -> \typeout {<CODE A>}
>     LABEL B -> \typeout {<CODE B>}
>     LABEL C -> \typeout {<CODE C>}
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     LABEL C|LABEL B with default relation <
> Execution order (after applying rules):
>     LABEL A, LABEL C, LABEL B.
<recently read> }
l. ...\TEST{top-level}{LABEL B}
==> Hook: 'RULES HOOK'
> Code chunks:
>   'LABEL A' -> \typeout {<CODE A>}
>   'LABEL B' -> \typeout {<CODE B>}
>   'LABEL C' -> \typeout {<CODE C>}
> Default rules:
>   'LABEL C' before 'LABEL B'
> Execution order:
>   1: 'LABEL A'
>   2: 'LABEL C'
>   3: 'LABEL B'.
<recently read> }
l. ...\TEST{top-level}{LABEL B}
<CODE A>
<CODE C>
<CODE B>
============================================================
============================================================
TEST 36: LABEL A <relation> LABEL B
============================================================
============================================================
=== <relation> <- before
-> The hook 'RULES HOOK':
> Code chunks:
>     LABEL A -> \typeout {<CODE A>}
>     LABEL B -> \typeout {<CODE B>}
>     LABEL C -> \typeout {<CODE C>}
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     LABEL B|LABEL A with relation >
>     LABEL C|LABEL B with default relation <
> Execution order (after applying rules):
>     LABEL A, LABEL C, LABEL B.
<recently read> }
l. ...\TEST{LABEL A}{LABEL B}
==> Hook: 'RULES HOOK'
> Code chunks:
>   'LABEL A' -> \typeout {<CODE A>}
>   'LABEL B' -> \typeout {<CODE B>}
>   'LABEL C' -> \typeout {<CODE C>}
> Default rules:
>   'LABEL C' before 'LABEL B'
> Rules:
>   'LABEL B' after 'LABEL A'
> Execution order:
>   1: 'LABEL A'
>   2: 'LABEL C'
>   3: 'LABEL B'.
<recently read> }
l. ...\TEST{LABEL A}{LABEL B}
<CODE A>
<CODE C>
<CODE B>
============================================================
=== <relation> <- after
-> The hook 'RULES HOOK':
> Code chunks:
>     LABEL A -> \typeout {<CODE A>}
>     LABEL B -> \typeout {<CODE B>}
>     LABEL C -> \typeout {<CODE C>}
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     LABEL B|LABEL A with relation <
>     LABEL C|LABEL B with default relation <
> Execution order (after applying rules):
>     LABEL C, LABEL B, LABEL A.
<recently read> }
l. ...\TEST{LABEL A}{LABEL B}
==> Hook: 'RULES HOOK'
> Code chunks:
>   'LABEL A' -> \typeout {<CODE A>}
>   'LABEL B' -> \typeout {<CODE B>}
>   'LABEL C' -> \typeout {<CODE C>}
> Default rules:
>   'LABEL C' before 'LABEL B'
> Rules:
>   'LABEL B' before 'LABEL A'
> Execution order:
>   1: 'LABEL C'
>   2: 'LABEL B'
>   3: 'LABEL A'.
<recently read> }
l. ...\TEST{LABEL A}{LABEL B}
<CODE C>
<CODE B>
<CODE A>
============================================================
=== <relation> <- unrelated
-> The hook 'RULES HOOK':
> Code chunks:
>     LABEL A -> \typeout {<CODE A>}
>     LABEL B -> \typeout {<CODE B>}
>     LABEL C -> \typeout {<CODE C>}
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     LABEL C|LABEL B with default relation <
> Execution order (after applying rules):
>     LABEL A, LABEL C, LABEL B.
<recently read> }
l. ...\TEST{LABEL A}{LABEL B}
==> Hook: 'RULES HOOK'
> Code chunks:
>   'LABEL A' -> \typeout {<CODE A>}
>   'LABEL B' -> \typeout {<CODE B>}
>   'LABEL C' -> \typeout {<CODE C>}
> Default rules:
>   'LABEL C' before 'LABEL B'
> Execution order:
>   1: 'LABEL A'
>   2: 'LABEL C'
>   3: 'LABEL B'.
<recently read> }
l. ...\TEST{LABEL A}{LABEL B}
<CODE A>
<CODE C>
<CODE B>
============================================================
=== <relation> <- incompatible-warning
LaTeX hooks Warning: Labels 'LABEL B' and 'LABEL A' are incompatible in hook
(hooks)              'RULES HOOK'. You may see errors later.
-> The hook 'RULES HOOK':
> Code chunks:
>     LABEL A -> \typeout {<CODE A>}
>     LABEL B -> \typeout {<CODE B>}
>     LABEL C -> \typeout {<CODE C>}
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     LABEL B|LABEL A with relation xW
>     LABEL C|LABEL B with default relation <
> Execution order (after applying rules):
>     LABEL A, LABEL C, LABEL B.
<recently read> }
l. ...\TEST{LABEL A}{LABEL B}
LaTeX hooks Warning: Labels 'LABEL B' and 'LABEL A' are incompatible in hook
(hooks)              'RULES HOOK'. You may see errors later.
==> Hook: 'RULES HOOK'
> Code chunks:
>   'LABEL A' -> \typeout {<CODE A>}
>   'LABEL B' -> \typeout {<CODE B>}
>   'LABEL C' -> \typeout {<CODE C>}
> Default rules:
>   'LABEL C' before 'LABEL B'
> Rules:
>   'LABEL B' incompatible-warning 'LABEL A'
> Execution order:
>   1: 'LABEL A' (Warning)
>   2: 'LABEL C'
>   3: 'LABEL B' (Warning).
<recently read> }
l. ...\TEST{LABEL A}{LABEL B}
LaTeX hooks Warning: Labels 'LABEL B' and 'LABEL A' are incompatible in hook
(hooks)              '\TESTHook '. You may see errors later.
<CODE A>
<CODE C>
<CODE B>
============================================================
=== <relation> <- incompatible-error
! LaTeX hooks Error: Labels 'LABEL B' and 'LABEL A' are incompatible in hook
(hooks)              'RULES HOOK'. The code for both labels will be dropped.
For immediate help type H <return>.
 ...                                              
l. ...\TEST{LABEL A}{LABEL B}
LaTeX found two incompatible labels in the same hook. This indicates an
incompatibility between packages.
-> The hook 'RULES HOOK':
> Code chunks:
>     LABEL A -> \typeout {<CODE A>}
>     LABEL B -> \typeout {<CODE B>}
>     LABEL C -> \typeout {<CODE C>}
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     LABEL B|LABEL A with relation xE
>     LABEL C|LABEL B with default relation <
> Execution order (after applying rules):
>     LABEL A, LABEL C, LABEL B.
<recently read> }
l. ...\TEST{LABEL A}{LABEL B}
! LaTeX hooks Error: Labels 'LABEL B' and 'LABEL A' are incompatible in hook
(hooks)              'RULES HOOK'. The code for both labels will be dropped.
For immediate help type H <return>.
 ...                                              
l. ...\TEST{LABEL A}{LABEL B}
LaTeX found two incompatible labels in the same hook. This indicates an
incompatibility between packages.
==> Hook: 'RULES HOOK'
> Code chunks:
>   'LABEL A' -> \typeout {<CODE A>}
>   'LABEL B' -> \typeout {<CODE B>}
>   'LABEL C' -> \typeout {<CODE C>}
> Default rules:
>   'LABEL C' before 'LABEL B'
> Rules:
>   'LABEL B' incompatible-error 'LABEL A'
> Execution order:
>   1: 'LABEL A' (Error)
>   2: 'LABEL C'
>   3: 'LABEL B' (Error).
<recently read> }
l. ...\TEST{LABEL A}{LABEL B}
! LaTeX hooks Error: Labels 'LABEL B' and 'LABEL A' are incompatible in hook
(hooks)              '\TESTHook '. The code for both labels will be dropped.
For immediate help type H <return>.
 ...                                              
l. ...\TEST{LABEL A}{LABEL B}
LaTeX found two incompatible labels in the same hook. This indicates an
incompatibility between packages.
<CODE C>
============================================================
============================================================
TEST 37: LABEL B <relation> LABEL A
============================================================
============================================================
=== <relation> <- before
-> The hook 'RULES HOOK':
> Code chunks:
>     LABEL A -> \typeout {<CODE A>}
>     LABEL B -> \typeout {<CODE B>}
>     LABEL C -> \typeout {<CODE C>}
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     LABEL B|LABEL A with relation <
>     LABEL C|LABEL B with default relation <
> Execution order (after applying rules):
>     LABEL C, LABEL B, LABEL A.
<recently read> }
l. ...\TEST{LABEL B}{LABEL A}
==> Hook: 'RULES HOOK'
> Code chunks:
>   'LABEL A' -> \typeout {<CODE A>}
>   'LABEL B' -> \typeout {<CODE B>}
>   'LABEL C' -> \typeout {<CODE C>}
> Default rules:
>   'LABEL C' before 'LABEL B'
> Rules:
>   'LABEL B' before 'LABEL A'
> Execution order:
>   1: 'LABEL C'
>   2: 'LABEL B'
>   3: 'LABEL A'.
<recently read> }
l. ...\TEST{LABEL B}{LABEL A}
<CODE C>
<CODE B>
<CODE A>
============================================================
=== <relation> <- after
-> The hook 'RULES HOOK':
> Code chunks:
>     LABEL A -> \typeout {<CODE A>}
>     LABEL B -> \typeout {<CODE B>}
>     LABEL C -> \typeout {<CODE C>}
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     LABEL B|LABEL A with relation >
>     LABEL C|LABEL B with default relation <
> Execution order (after applying rules):
>     LABEL A, LABEL C, LABEL B.
<recently read> }
l. ...\TEST{LABEL B}{LABEL A}
==> Hook: 'RULES HOOK'
> Code chunks:
>   'LABEL A' -> \typeout {<CODE A>}
>   'LABEL B' -> \typeout {<CODE B>}
>   'LABEL C' -> \typeout {<CODE C>}
> Default rules:
>   'LABEL C' before 'LABEL B'
> Rules:
>   'LABEL B' after 'LABEL A'
> Execution order:
>   1: 'LABEL A'
>   2: 'LABEL C'
>   3: 'LABEL B'.
<recently read> }
l. ...\TEST{LABEL B}{LABEL A}
<CODE A>
<CODE C>
<CODE B>
============================================================
=== <relation> <- unrelated
-> The hook 'RULES HOOK':
> Code chunks:
>     LABEL A -> \typeout {<CODE A>}
>     LABEL B -> \typeout {<CODE B>}
>     LABEL C -> \typeout {<CODE C>}
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     LABEL C|LABEL B with default relation <
> Execution order (after applying rules):
>     LABEL A, LABEL C, LABEL B.
<recently read> }
l. ...\TEST{LABEL B}{LABEL A}
==> Hook: 'RULES HOOK'
> Code chunks:
>   'LABEL A' -> \typeout {<CODE A>}
>   'LABEL B' -> \typeout {<CODE B>}
>   'LABEL C' -> \typeout {<CODE C>}
> Default rules:
>   'LABEL C' before 'LABEL B'
> Execution order:
>   1: 'LABEL A'
>   2: 'LABEL C'
>   3: 'LABEL B'.
<recently read> }
l. ...\TEST{LABEL B}{LABEL A}
<CODE A>
<CODE C>
<CODE B>
============================================================
=== <relation> <- incompatible-warning
LaTeX hooks Warning: Labels 'LABEL B' and 'LABEL A' are incompatible in hook
(hooks)              'RULES HOOK'. You may see errors later.
-> The hook 'RULES HOOK':
> Code chunks:
>     LABEL A -> \typeout {<CODE A>}
>     LABEL B -> \typeout {<CODE B>}
>     LABEL C -> \typeout {<CODE C>}
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     LABEL B|LABEL A with relation xW
>     LABEL C|LABEL B with default relation <
> Execution order (after applying rules):
>     LABEL A, LABEL C, LABEL B.
<recently read> }
l. ...\TEST{LABEL B}{LABEL A}
LaTeX hooks Warning: Labels 'LABEL B' and 'LABEL A' are incompatible in hook
(hooks)              'RULES HOOK'. You may see errors later.
==> Hook: 'RULES HOOK'
> Code chunks:
>   'LABEL A' -> \typeout {<CODE A>}
>   'LABEL B' -> \typeout {<CODE B>}
>   'LABEL C' -> \typeout {<CODE C>}
> Default rules:
>   'LABEL C' before 'LABEL B'
> Rules:
>   'LABEL B' incompatible-warning 'LABEL A'
> Execution order:
>   1: 'LABEL A' (Warning)
>   2: 'LABEL C'
>   3: 'LABEL B' (Warning).
<recently read> }
l. ...\TEST{LABEL B}{LABEL A}
LaTeX hooks Warning: Labels 'LABEL B' and 'LABEL A' are incompatible in hook
(hooks)              '\TESTHook '. You may see errors later.
<CODE A>
<CODE C>
<CODE B>
============================================================
=== <relation> <- incompatible-error
! LaTeX hooks Error: Labels 'LABEL B' and 'LABEL A' are incompatible in hook
(hooks)              'RULES HOOK'. The code for both labels will be dropped.
For immediate help type H <return>.
 ...                                              
l. ...\TEST{LABEL B}{LABEL A}
LaTeX found two incompatible labels in the same hook. This indicates an
incompatibility between packages.
-> The hook 'RULES HOOK':
> Code chunks:
>     LABEL A -> \typeout {<CODE A>}
>     LABEL B -> \typeout {<CODE B>}
>     LABEL C -> \typeout {<CODE C>}
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     LABEL B|LABEL A with relation xE
>     LABEL C|LABEL B with default relation <
> Execution order (after applying rules):
>     LABEL A, LABEL C, LABEL B.
<recently read> }
l. ...\TEST{LABEL B}{LABEL A}
! LaTeX hooks Error: Labels 'LABEL B' and 'LABEL A' are incompatible in hook
(hooks)              'RULES HOOK'. The code for both labels will be dropped.
For immediate help type H <return>.
 ...                                              
l. ...\TEST{LABEL B}{LABEL A}
LaTeX found two incompatible labels in the same hook. This indicates an
incompatibility between packages.
==> Hook: 'RULES HOOK'
> Code chunks:
>   'LABEL A' -> \typeout {<CODE A>}
>   'LABEL B' -> \typeout {<CODE B>}
>   'LABEL C' -> \typeout {<CODE C>}
> Default rules:
>   'LABEL C' before 'LABEL B'
> Rules:
>   'LABEL B' incompatible-error 'LABEL A'
> Execution order:
>   1: 'LABEL A' (Error)
>   2: 'LABEL C'
>   3: 'LABEL B' (Error).
<recently read> }
l. ...\TEST{LABEL B}{LABEL A}
! LaTeX hooks Error: Labels 'LABEL B' and 'LABEL A' are incompatible in hook
(hooks)              '\TESTHook '. The code for both labels will be dropped.
For immediate help type H <return>.
 ...                                              
l. ...\TEST{LABEL B}{LABEL A}
LaTeX found two incompatible labels in the same hook. This indicates an
incompatibility between packages.
<CODE C>
============================================================
============================================================
============================================================
TEST 38: LEADING DOT
============================================================
-> The hook 'top-level/HOOK':
> Code chunks:
>     top-level/labelA -> \typeout {A}
>     top-level/labelB -> \typeout {B}
>     top-level/labelC -> \typeout {C}
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     top-level/labelA, top-level/labelB, top-level/labelC.
<recently read> }
l. ...\OldShowHook{./HOOK}
==> Hook: 'top-level/HOOK'
> Code chunks:
>   'top-level/labelA' -> \typeout {A}
>   'top-level/labelB' -> \typeout {B}
>   'top-level/labelC' -> \typeout {C}
> Execution order:
>   1: 'top-level/labelA'
>   2: 'top-level/labelB'
>   3: 'top-level/labelC'.
<recently read> }
l. ...\ShowHook{./HOOK}
-> The hook './HOOK':
> Code chunks:
>     ./labelA -> \typeout {A}
>     ./labelB -> \typeout {B}
>     ./labelC -> \typeout {C}
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     ./labelA, ./labelB, ./labelC.
<recently read> }
l. ...\OldShowHook{{./HOOK}}
==> Hook: './HOOK'
> Code chunks:
>   './labelA' -> \typeout {A}
>   './labelB' -> \typeout {B}
>   './labelC' -> \typeout {C}
> Execution order:
>   1: './labelA'
>   2: './labelB'
>   3: './labelC'.
<recently read> }
l. ...\ShowHook{{./HOOK}}
-> The hook './HOOK':
> Code chunks:
>     ./labelA -> \typeout {A}
>     ./labelB -> \typeout {B}
>     ./labelC -> \typeout {C}
>     ./labelD -> \typeout {D}
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     ./labelA, ./labelB, ./labelC, ./labelD.
<recently read> }
l. ...\OldShowHook{{./HOOK}}
==> Hook: './HOOK'
> Code chunks:
>   './labelA' -> \typeout {A}
>   './labelB' -> \typeout {B}
>   './labelC' -> \typeout {C}
>   './labelD' -> \typeout {D}
> Execution order:
>   1: './labelA'
>   2: './labelB'
>   3: './labelC'
>   4: './labelD'.
<recently read> }
l. ...\ShowHook{{./HOOK}}
============================================================
-> The hook './HOOK':
> Code chunks:
>     ./labelD -> \typeout {D}
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     ./labelD.
<recently read> }
l. ...\OldShowHook{{./HOOK}}
==> Hook: './HOOK'
> Code chunks:
>   './labelD' -> \typeout {D}
> Execution order:
>   1: './labelD'.
<recently read> }
l. ...\ShowHook{{./HOOK}}
============================================================
-> The hook './HOOK':
> The hook is empty.
<recently read> }
l. ...\OldShowHook{{./HOOK}}
==> Hook: './HOOK'
>   empty.
<recently read> }
l. ...\ShowHook{{./HOOK}}
============================================================
>>>>>>>>>> Compare...
============================================================
!!!! If this test changes the documentation needs updating !!!!
