This is a generated file for the l3build validation system.
Don't change this file in any respect.
============================================================
TEST 1: Environment: envA
============================================================
==> Hook: 'env/envA/before'
>   builtin generic.
<recently read> }
l. ...  {envA}
==> Hook: 'env/envA/begin'
>   builtin generic.
<recently read> }
l. ...  {envA}
==> Hook: 'env/envA/end'
>   builtin generic.
<recently read> }
l. ...  {envA}
==> Hook: 'env/envA/after'
>   builtin generic.
<recently read> }
l. ...  {envA}
==> Hook: 'env/envA/before'
>   builtin generic
> Code chunks:
>   'top-level' -> \TYPE {<envA BEFORE>}
> Execution order:
>   1: 'top-level'.
<recently read> }
l. ...  {envA}
==> Hook: 'env/envA/begin'
>   builtin generic
> Code chunks:
>   'top-level' -> \TYPE {<envA BEGIN>}
> Execution order:
>   1: 'top-level'.
<recently read> }
l. ...  {envA}
==> Hook: 'env/envA/end'
>   builtin generic
> Code chunks:
>   'top-level' -> \TYPE {<envA END>}
> Execution order:
>   1: 'top-level'.
<recently read> }
l. ...  {envA}
==> Hook: 'env/envA/after'
>   builtin generic, reversed
> Code chunks:
>   'top-level' -> \TYPE {<envA AFTER>}
> Execution order:
>   1: 'top-level'.
<recently read> }
l. ...  {envA}
============================================================
<envA BEFORE>
<envA BEGIN>
<BEGIN{envA}>
<envA BODY>
<envA END>
<END{envA}>
<envA AFTER>
============================================================
TEST 2: Environment: envB
============================================================
==> Hook: 'env/envB/before'
>   builtin generic.
<recently read> }
l. ...  {envB}
==> Hook: 'env/envB/begin'
>   builtin generic.
<recently read> }
l. ...  {envB}
==> Hook: 'env/envB/end'
>   builtin generic.
<recently read> }
l. ...  {envB}
==> Hook: 'env/envB/after'
>   builtin generic.
<recently read> }
l. ...  {envB}
==> Hook: 'env/envB/before'
>   builtin generic
> Code chunks:
>   'top-level' -> \TYPE {<envB BEFORE>}
> Execution order:
>   1: 'top-level'.
<recently read> }
l. ...  {envB}
==> Hook: 'env/envB/begin'
>   builtin generic
> Code chunks:
>   'top-level' -> \TYPE {<envB BEGIN>}
> Execution order:
>   1: 'top-level'.
<recently read> }
l. ...  {envB}
==> Hook: 'env/envB/end'
>   builtin generic
> Code chunks:
>   'top-level' -> \TYPE {<envB END>}
> Execution order:
>   1: 'top-level'.
<recently read> }
l. ...  {envB}
==> Hook: 'env/envB/after'
>   builtin generic, reversed
> Code chunks:
>   'top-level' -> \TYPE {<envB AFTER>}
> Execution order:
>   1: 'top-level'.
<recently read> }
l. ...  {envB}
============================================================
<envB BEFORE>
<envB BEGIN>
<BEGIN{envB}>
<envB BODY>
<envB END>
<END{envB}>
<envB AFTER>
============================================================
TEST 3: Command: Undefined command with no arguments
============================================================
==> Hook: 'cmd/cmdA/before'
>   builtin generic.
<recently read> }
l. ...  {cmdA}
==> Hook: 'cmd/cmdA/after'
>   builtin generic.
<recently read> }
l. ...  {cmdA}
==> Hook: 'cmd/cmdA/before'
>   builtin generic, unknown arguments
> Code chunks:
>   'top-level' -> \TYPE {<cmdA BEFORE>}
> Execution order:
>   1: 'top-level'.
<recently read> }
l. ...  {cmdA}
==> Hook: 'cmd/cmdA/after'
>   builtin generic, reversed, unknown arguments
> Code chunks:
>   'top-level' -> \TYPE {<cmdA AFTER>}
> Execution order:
>   1: 'top-level'.
<recently read> }
l. ...  {cmdA}
============================================================
<cmdA BODY>
============================================================
TEST 4: Command: Defined command with no arguments
============================================================
==> Hook: 'cmd/cmdB/before'
>   builtin generic.
<recently read> }
l. ...  {cmdB}
==> Hook: 'cmd/cmdB/after'
>   builtin generic.
<recently read> }
l. ...  {cmdB}
==> Hook: 'cmd/cmdB/before'
>   builtin generic, unknown arguments
> Code chunks:
>   'top-level' -> \TYPE {<cmdB BEFORE>}
> Execution order:
>   1: 'top-level'.
<recently read> }
l. ...  {cmdB}
==> Hook: 'cmd/cmdB/after'
>   builtin generic, reversed, unknown arguments
> Code chunks:
>   'top-level' -> \TYPE {<cmdB AFTER>}
> Execution order:
>   1: 'top-level'.
<recently read> }
l. ...  {cmdB}
============================================================
<cmdA BODY>
============================================================
TEST 5: Command Undefined command with one argument
============================================================
==> Hook: 'cmd/cmdOneArgA/before'
>   builtin generic.
<recently read> }
l. ...  {cmdOneArgA}
==> Hook: 'cmd/cmdOneArgA/after'
>   builtin generic.
<recently read> }
l. ...  {cmdOneArgA}
==> Hook: 'cmd/cmdOneArgA/before'
>   builtin generic, unknown arguments
> Code chunks:
>   'top-level' -> \TYPE {<cmdOneArgA BEFORE>}\TYPE {<BEFORE:#1>}
> Execution order:
>   1: 'top-level'.
<recently read> }
l. ...  {cmdOneArgA}
==> Hook: 'cmd/cmdOneArgA/after'
>   builtin generic, reversed, unknown arguments
> Code chunks:
>   'top-level' -> \TYPE {<cmdOneArgA AFTER>}\TYPE {<AFTER:#1>}
> Execution order:
>   1: 'top-level'.
<recently read> }
l. ...  {cmdOneArgA}
============================================================
<cmdOneArgA BODY: argA 1>
============================================================
TEST 6: Command Defined command with one argument
============================================================
==> Hook: 'cmd/cmdOneArgB/before'
>   builtin generic.
<recently read> }
l. ...  {cmdOneArgB}
==> Hook: 'cmd/cmdOneArgB/after'
>   builtin generic.
<recently read> }
l. ...  {cmdOneArgB}
==> Hook: 'cmd/cmdOneArgB/before'
>   builtin generic, unknown arguments
> Code chunks:
>   'top-level' -> \TYPE {<cmdOneArgB BEFORE>}\TYPE {<BEFORE:#1>}
> Execution order:
>   1: 'top-level'.
<recently read> }
l. ...  {cmdOneArgB}
==> Hook: 'cmd/cmdOneArgB/after'
>   builtin generic, reversed, unknown arguments
> Code chunks:
>   'top-level' -> \TYPE {<cmdOneArgB AFTER>}\TYPE {<AFTER:#1>}
> Execution order:
>   1: 'top-level'.
<recently read> }
l. ...  {cmdOneArgB}
============================================================
<cmdOneArgB BODY: argB 1>
============================================================
TEST 7: Custom generic hook: CUSTOM GENERIC HOOK
============================================================
============================================================
TEST 8: Raw: CUSTOM GENERIC HOOK
============================================================
==> Hook: 'CUSTOM GENERIC HOOK'
>   not declared
> Code chunks:
>   'LABEL' -> \TYPE {<CUSTOM GENERIC HOOK CODE>}
> No execution.
<recently read> }
l. ...  {CUSTOM GENERIC HOOK}
============================================================
============================================================
TEST 9: Activated: CUSTOM GENERIC HOOK
============================================================
<CUSTOM GENERIC HOOK CODE>
==> Hook: 'CUSTOM GENERIC HOOK'
> Code chunks:
>   'LABEL' -> \TYPE {<CUSTOM GENERIC HOOK CODE>}
> Execution order:
>   1: 'LABEL'.
<recently read> }
l. ...  {CUSTOM GENERIC HOOK}
============================================================
============================================================
TEST 10: Disabled: CUSTOM GENERIC HOOK
============================================================
==> Hook: 'CUSTOM GENERIC HOOK'
>   not declared, disabled
> Code chunks:
>   'LABEL' -> \TYPE {<CUSTOM GENERIC HOOK CODE>}
> No execution.
<recently read> }
l. ...  {CUSTOM GENERIC HOOK}
============================================================
============================================================
============================================================
TEST 11: OTHER HOOK: Undeclared
============================================================
============================================================
TEST 12: Undeclared UNDECLARED HOOK
============================================================
==> Hook: 'UNDECLARED HOOK'
>   not declared.
<recently read> }
l. ...  {UNDECLARED HOOK}
============================================================
============================================================
TEST 13: UNDECLARED HOOK + TOP LEVEL
============================================================
==> Hook: 'UNDECLARED HOOK'
>   not declared
> Code chunks:
>   'top-level' -> \TYPE {<UNDECLARED HOOK TOP-LEVEL>}
> No execution.
<recently read> }
l. ...  {UNDECLARED HOOK}
============================================================
============================================================
TEST 14: UNDECLARED HOOK + A LABEL
============================================================
==> Hook: 'UNDECLARED HOOK'
>   not declared
> Code chunks:
>   'A LABEL' -> \TYPE {<UNDECLARED HOOK A CODE>}
>   'top-level' -> \TYPE {<UNDECLARED HOOK TOP-LEVEL>}
> No execution.
<recently read> }
l. ...  {UNDECLARED HOOK}
============================================================
============================================================
TEST 15: UNDECLARED HOOK + B LABEL
============================================================
==> Hook: 'UNDECLARED HOOK'
>   not declared
> Code chunks:
>   'A LABEL' -> \TYPE {<UNDECLARED HOOK A CODE>}
>   'B LABEL' -> \TYPE {<UNDECLARED HOOK B CODE>}
>   'top-level' -> \TYPE {<UNDECLARED HOOK TOP-LEVEL>}
> No execution.
<recently read> }
l. ...  {UNDECLARED HOOK}
============================================================
============================================================
TEST 16: UNDECLARED HOOK + C LABEL
============================================================
==> Hook: 'UNDECLARED HOOK'
>   not declared
> Code chunks:
>   'A LABEL' -> \TYPE {<UNDECLARED HOOK A CODE>}
>   'B LABEL' -> \TYPE {<UNDECLARED HOOK B CODE>}
>   'C LABEL' -> \TYPE {<UNDECLARED HOOK C CODE>}
>   'top-level' -> \TYPE {<UNDECLARED HOOK TOP-LEVEL>}
> No execution.
<recently read> }
l. ...  {UNDECLARED HOOK}
============================================================
============================================================
TEST 17: UNDECLARED HOOK + NEXT
============================================================
==> Hook: 'UNDECLARED HOOK'
>   not declared
> Code chunks:
>   'A LABEL' -> \TYPE {<UNDECLARED HOOK A CODE>}
>   'B LABEL' -> \TYPE {<UNDECLARED HOOK B CODE>}
>   'C LABEL' -> \TYPE {<UNDECLARED HOOK C CODE>}
>   'top-level' -> \TYPE {<UNDECLARED HOOK TOP-LEVEL>}
>   next-only -> \TYPE {<NEXT-ONLY>}
> No execution.
<recently read> }
l. ...  {UNDECLARED HOOK}
==> Hook: 'UNDECLARED HOOK'
>   not declared
> Code chunks:
>   'A LABEL' -> \TYPE {<UNDECLARED HOOK A CODE>}
>   'B LABEL' -> \TYPE {<UNDECLARED HOOK B CODE>}
>   'C LABEL' -> \TYPE {<UNDECLARED HOOK C CODE>}
>   'top-level' -> \TYPE {<UNDECLARED HOOK TOP-LEVEL>}
>   next-only -> \TYPE {<NEXT-ONLY>}
> No execution.
<recently read> }
l. ...  {UNDECLARED HOOK}
============================================================
============================================================
TEST 18: UNDECLARED HOOK + C LABEL < A LABEL
============================================================
==> Hook: 'UNDECLARED HOOK'
>   not declared
> Code chunks:
>   'A LABEL' -> \TYPE {<UNDECLARED HOOK A CODE>}
>   'B LABEL' -> \TYPE {<UNDECLARED HOOK B CODE>}
>   'C LABEL' -> \TYPE {<UNDECLARED HOOK C CODE>}
>   'top-level' -> \TYPE {<UNDECLARED HOOK TOP-LEVEL>}
>   next-only -> \TYPE {<NEXT-ONLY>}
> Rules:
>   'C LABEL' before 'A LABEL'
> No execution.
<recently read> }
l. ...  {UNDECLARED HOOK}
============================================================
============================================================
TEST 19: UNDECLARED HOOK + DEFAULT: B LABEL > C LABEL
============================================================
==> Hook: 'UNDECLARED HOOK'
>   not declared
> Code chunks:
>   'A LABEL' -> \TYPE {<UNDECLARED HOOK A CODE>}
>   'B LABEL' -> \TYPE {<UNDECLARED HOOK B CODE>}
>   'C LABEL' -> \TYPE {<UNDECLARED HOOK C CODE>}
>   'top-level' -> \TYPE {<UNDECLARED HOOK TOP-LEVEL>}
>   next-only -> \TYPE {<NEXT-ONLY>}
> Default rules:
>   'C LABEL' before 'B LABEL'
> Rules:
>   'C LABEL' before 'A LABEL'
> No execution.
<recently read> }
l. ...  {UNDECLARED HOOK}
============================================================
============================================================
============================================================
TEST 20: OTHER HOOK: declared
============================================================
============================================================
TEST 21: Undeclared DECLARED HOOK
============================================================
==> Hook: 'DECLARED HOOK'
>   empty.
<recently read> }
l. ...  {DECLARED HOOK}
============================================================
============================================================
TEST 22: DECLARED HOOK + TOP LEVEL
============================================================
<DECLARED HOOK TOP-LEVEL>
==> Hook: 'DECLARED HOOK'
> Code chunks:
>   'top-level' -> \TYPE {<DECLARED HOOK TOP-LEVEL>}
> Execution order:
>   1: 'top-level'.
<recently read> }
l. ...  {DECLARED HOOK}
============================================================
============================================================
TEST 23: DECLARED HOOK + A LABEL
============================================================
<DECLARED HOOK A CODE>
<DECLARED HOOK TOP-LEVEL>
==> Hook: 'DECLARED HOOK'
> Code chunks:
>   'A LABEL' -> \TYPE {<DECLARED HOOK A CODE>}
>   'top-level' -> \TYPE {<DECLARED HOOK TOP-LEVEL>}
> Execution order:
>   1: 'A LABEL'
>   2: 'top-level'.
<recently read> }
l. ...  {DECLARED HOOK}
============================================================
============================================================
TEST 24: DECLARED HOOK + B LABEL
============================================================
<DECLARED HOOK A CODE>
<DECLARED HOOK B CODE>
<DECLARED HOOK TOP-LEVEL>
==> Hook: 'DECLARED HOOK'
> Code chunks:
>   'A LABEL' -> \TYPE {<DECLARED HOOK A CODE>}
>   'B LABEL' -> \TYPE {<DECLARED HOOK B CODE>}
>   'top-level' -> \TYPE {<DECLARED HOOK TOP-LEVEL>}
> Execution order:
>   1: 'A LABEL'
>   2: 'B LABEL'
>   3: 'top-level'.
<recently read> }
l. ...  {DECLARED HOOK}
============================================================
============================================================
TEST 25: DECLARED HOOK + C LABEL
============================================================
<DECLARED HOOK A CODE>
<DECLARED HOOK C CODE>
<DECLARED HOOK B CODE>
<DECLARED HOOK TOP-LEVEL>
==> Hook: 'DECLARED HOOK'
> Code chunks:
>   'A LABEL' -> \TYPE {<DECLARED HOOK A CODE>}
>   'B LABEL' -> \TYPE {<DECLARED HOOK B CODE>}
>   'C LABEL' -> \TYPE {<DECLARED HOOK C CODE>}
>   'top-level' -> \TYPE {<DECLARED HOOK TOP-LEVEL>}
> Default rules:
>   'C LABEL' before 'B LABEL'
> Execution order:
>   1: 'A LABEL'
>   2: 'C LABEL'
>   3: 'B LABEL'
>   4: 'top-level'.
<recently read> }
l. ...  {DECLARED HOOK}
============================================================
============================================================
TEST 26: DECLARED HOOK + NEXT
============================================================
==> Hook: 'DECLARED HOOK'
> Code chunks:
>   'A LABEL' -> \TYPE {<DECLARED HOOK A CODE>}
>   'B LABEL' -> \TYPE {<DECLARED HOOK B CODE>}
>   'C LABEL' -> \TYPE {<DECLARED HOOK C CODE>}
>   'top-level' -> \TYPE {<DECLARED HOOK TOP-LEVEL>}
>   next-only -> \TYPE {<NEXT-ONLY>}
> Default rules:
>   'C LABEL' before 'B LABEL'
> Execution order:
>   1: 'A LABEL'
>   2: 'C LABEL'
>   3: 'B LABEL'
>   4: 'top-level'
>   5: next-only.
<recently read> }
l. ...  {DECLARED HOOK}
<DECLARED HOOK A CODE>
<DECLARED HOOK C CODE>
<DECLARED HOOK B CODE>
<DECLARED HOOK TOP-LEVEL>
<NEXT-ONLY>
==> Hook: 'DECLARED HOOK'
> Code chunks:
>   'A LABEL' -> \TYPE {<DECLARED HOOK A CODE>}
>   'B LABEL' -> \TYPE {<DECLARED HOOK B CODE>}
>   'C LABEL' -> \TYPE {<DECLARED HOOK C CODE>}
>   'top-level' -> \TYPE {<DECLARED HOOK TOP-LEVEL>}
> Default rules:
>   'C LABEL' before 'B LABEL'
> Execution order:
>   1: 'A LABEL'
>   2: 'C LABEL'
>   3: 'B LABEL'
>   4: 'top-level'.
<recently read> }
l. ...  {DECLARED HOOK}
============================================================
============================================================
TEST 27: DECLARED HOOK + C LABEL < A LABEL
============================================================
<DECLARED HOOK C CODE>
<DECLARED HOOK A CODE>
<DECLARED HOOK B CODE>
<DECLARED HOOK TOP-LEVEL>
==> Hook: 'DECLARED HOOK'
> Code chunks:
>   'A LABEL' -> \TYPE {<DECLARED HOOK A CODE>}
>   'B LABEL' -> \TYPE {<DECLARED HOOK B CODE>}
>   'C LABEL' -> \TYPE {<DECLARED HOOK C CODE>}
>   'top-level' -> \TYPE {<DECLARED HOOK TOP-LEVEL>}
> Default rules:
>   'C LABEL' before 'B LABEL'
> Rules:
>   'C LABEL' before 'A LABEL'
> Execution order:
>   1: 'C LABEL'
>   2: 'A LABEL'
>   3: 'B LABEL'
>   4: 'top-level'.
<recently read> }
l. ...  {DECLARED HOOK}
============================================================
============================================================
TEST 28: DECLARED HOOK + DEFAULT: B LABEL > C LABEL
============================================================
<DECLARED HOOK C CODE>
<DECLARED HOOK A CODE>
<DECLARED HOOK B CODE>
<DECLARED HOOK TOP-LEVEL>
==> Hook: 'DECLARED HOOK'
> Code chunks:
>   'A LABEL' -> \TYPE {<DECLARED HOOK A CODE>}
>   'B LABEL' -> \TYPE {<DECLARED HOOK B CODE>}
>   'C LABEL' -> \TYPE {<DECLARED HOOK C CODE>}
>   'top-level' -> \TYPE {<DECLARED HOOK TOP-LEVEL>}
> Default rules:
>   'C LABEL' before 'B LABEL'
> Rules:
>   'C LABEL' before 'A LABEL'
> Execution order:
>   1: 'C LABEL'
>   2: 'A LABEL'
>   3: 'B LABEL'
>   4: 'top-level'.
<recently read> }
l. ...  {DECLARED HOOK}
============================================================
============================================================
============================================================
TEST 29: OTHER HOOK: declared reversed
============================================================
============================================================
TEST 30: Undeclared DECLARED REVERSED
============================================================
==> Hook: 'DECLARED REVERSED'
>   reversed.
<recently read> }
l. ...  {DECLARED REVERSED}
============================================================
============================================================
TEST 31: DECLARED REVERSED + TOP LEVEL
============================================================
<DECLARED REVERSED TOP-LEVEL>
==> Hook: 'DECLARED REVERSED'
>   reversed
> Code chunks:
>   'top-level' -> \TYPE {<DECLARED REVERSED TOP-LEVEL>}
> Execution order:
>   1: 'top-level'.
<recently read> }
l. ...  {DECLARED REVERSED}
============================================================
============================================================
TEST 32: DECLARED REVERSED + A LABEL
============================================================
<DECLARED REVERSED TOP-LEVEL>
<DECLARED REVERSED A CODE>
==> Hook: 'DECLARED REVERSED'
>   reversed
> Code chunks:
>   'A LABEL' -> \TYPE {<DECLARED REVERSED A CODE>}
>   'top-level' -> \TYPE {<DECLARED REVERSED TOP-LEVEL>}
> Execution order:
>   1: 'top-level'
>   2: 'A LABEL'.
<recently read> }
l. ...  {DECLARED REVERSED}
============================================================
============================================================
TEST 33: DECLARED REVERSED + B LABEL
============================================================
<DECLARED REVERSED TOP-LEVEL>
<DECLARED REVERSED B CODE>
<DECLARED REVERSED A CODE>
==> Hook: 'DECLARED REVERSED'
>   reversed
> Code chunks:
>   'A LABEL' -> \TYPE {<DECLARED REVERSED A CODE>}
>   'B LABEL' -> \TYPE {<DECLARED REVERSED B CODE>}
>   'top-level' -> \TYPE {<DECLARED REVERSED TOP-LEVEL>}
> Execution order:
>   1: 'top-level'
>   2: 'B LABEL'
>   3: 'A LABEL'.
<recently read> }
l. ...  {DECLARED REVERSED}
============================================================
============================================================
TEST 34: DECLARED REVERSED + C LABEL
============================================================
<DECLARED REVERSED TOP-LEVEL>
<DECLARED REVERSED B CODE>
<DECLARED REVERSED C CODE>
<DECLARED REVERSED A CODE>
==> Hook: 'DECLARED REVERSED'
>   reversed
> Code chunks:
>   'A LABEL' -> \TYPE {<DECLARED REVERSED A CODE>}
>   'B LABEL' -> \TYPE {<DECLARED REVERSED B CODE>}
>   'C LABEL' -> \TYPE {<DECLARED REVERSED C CODE>}
>   'top-level' -> \TYPE {<DECLARED REVERSED TOP-LEVEL>}
> Default rules, to be mirrored:
>   'C LABEL' before 'B LABEL'
> Execution order:
>   1: 'top-level'
>   2: 'B LABEL'
>   3: 'C LABEL'
>   4: 'A LABEL'.
<recently read> }
l. ...  {DECLARED REVERSED}
============================================================
============================================================
TEST 35: DECLARED REVERSED + NEXT
============================================================
==> Hook: 'DECLARED REVERSED'
>   reversed
> Code chunks:
>   'A LABEL' -> \TYPE {<DECLARED REVERSED A CODE>}
>   'B LABEL' -> \TYPE {<DECLARED REVERSED B CODE>}
>   'C LABEL' -> \TYPE {<DECLARED REVERSED C CODE>}
>   'top-level' -> \TYPE {<DECLARED REVERSED TOP-LEVEL>}
>   next-only -> \TYPE {<NEXT-ONLY>}
> Default rules, to be mirrored:
>   'C LABEL' before 'B LABEL'
> Execution order:
>   1: 'top-level'
>   2: 'B LABEL'
>   3: 'C LABEL'
>   4: 'A LABEL'
>   5: next-only.
<recently read> }
l. ...  {DECLARED REVERSED}
<DECLARED REVERSED TOP-LEVEL>
<DECLARED REVERSED B CODE>
<DECLARED REVERSED C CODE>
<DECLARED REVERSED A CODE>
<NEXT-ONLY>
==> Hook: 'DECLARED REVERSED'
>   reversed
> Code chunks:
>   'A LABEL' -> \TYPE {<DECLARED REVERSED A CODE>}
>   'B LABEL' -> \TYPE {<DECLARED REVERSED B CODE>}
>   'C LABEL' -> \TYPE {<DECLARED REVERSED C CODE>}
>   'top-level' -> \TYPE {<DECLARED REVERSED TOP-LEVEL>}
> Default rules, to be mirrored:
>   'C LABEL' before 'B LABEL'
> Execution order:
>   1: 'top-level'
>   2: 'B LABEL'
>   3: 'C LABEL'
>   4: 'A LABEL'.
<recently read> }
l. ...  {DECLARED REVERSED}
============================================================
============================================================
TEST 36: DECLARED REVERSED + C LABEL < A LABEL
============================================================
<DECLARED REVERSED TOP-LEVEL>
<DECLARED REVERSED B CODE>
<DECLARED REVERSED C CODE>
<DECLARED REVERSED A CODE>
==> Hook: 'DECLARED REVERSED'
>   reversed
> Code chunks:
>   'A LABEL' -> \TYPE {<DECLARED REVERSED A CODE>}
>   'B LABEL' -> \TYPE {<DECLARED REVERSED B CODE>}
>   'C LABEL' -> \TYPE {<DECLARED REVERSED C CODE>}
>   'top-level' -> \TYPE {<DECLARED REVERSED TOP-LEVEL>}
> Default rules, to be mirrored:
>   'C LABEL' before 'B LABEL'
> Rules:
>   'C LABEL' before 'A LABEL'
> Execution order:
>   1: 'top-level'
>   2: 'B LABEL'
>   3: 'C LABEL'
>   4: 'A LABEL'.
<recently read> }
l. ...  {DECLARED REVERSED}
============================================================
============================================================
TEST 37: DECLARED REVERSED + DEFAULT: B LABEL > C LABEL
============================================================
<DECLARED REVERSED TOP-LEVEL>
<DECLARED REVERSED B CODE>
<DECLARED REVERSED C CODE>
<DECLARED REVERSED A CODE>
==> Hook: 'DECLARED REVERSED'
>   reversed
> Code chunks:
>   'A LABEL' -> \TYPE {<DECLARED REVERSED A CODE>}
>   'B LABEL' -> \TYPE {<DECLARED REVERSED B CODE>}
>   'C LABEL' -> \TYPE {<DECLARED REVERSED C CODE>}
>   'top-level' -> \TYPE {<DECLARED REVERSED TOP-LEVEL>}
> Default rules, to be mirrored:
>   'C LABEL' before 'B LABEL'
> Rules:
>   'C LABEL' before 'A LABEL'
> Execution order:
>   1: 'top-level'
>   2: 'B LABEL'
>   3: 'C LABEL'
>   4: 'A LABEL'.
<recently read> }
l. ...  {DECLARED REVERSED}
============================================================
============================================================
============================================================
TEST 38: OTHER HOOK: with one argument
============================================================
============================================================
TEST 39: Undeclared WITH ONE ARGUMENT
============================================================
==> Hook: 'WITH ONE ARGUMENT'
>   1 argument.
<recently read> }
l. ...  {WITH ONE ARGUMENT}
============================================================
============================================================
TEST 40: WITH ONE ARGUMENT + TOP LEVEL
============================================================
<WITH ONE ARGUMENT TOP-LEVEL: WITH ONE ARGUMENT ARG 1>
==> Hook: 'WITH ONE ARGUMENT'
>   1 argument
> Code chunks:
>   'top-level' -> \TYPE {<WITH ONE ARGUMENT TOP-LEVEL: #1>}
> Execution order:
>   1: 'top-level'.
<recently read> }
l. ...  {WITH ONE ARGUMENT}
============================================================
============================================================
TEST 41: WITH ONE ARGUMENT + A LABEL
============================================================
<WITH ONE ARGUMENT A CODE: WITH ONE ARGUMENT ARG 1>
<WITH ONE ARGUMENT TOP-LEVEL: WITH ONE ARGUMENT ARG 1>
==> Hook: 'WITH ONE ARGUMENT'
>   1 argument
> Code chunks:
>   'A LABEL' -> \TYPE {<WITH ONE ARGUMENT A CODE: #1>}
>   'top-level' -> \TYPE {<WITH ONE ARGUMENT TOP-LEVEL: #1>}
> Execution order:
>   1: 'A LABEL'
>   2: 'top-level'.
<recently read> }
l. ...  {WITH ONE ARGUMENT}
============================================================
============================================================
TEST 42: WITH ONE ARGUMENT + B LABEL
============================================================
<WITH ONE ARGUMENT A CODE: WITH ONE ARGUMENT ARG 1>
<WITH ONE ARGUMENT B CODE: WITH ONE ARGUMENT ARG 1>
<WITH ONE ARGUMENT TOP-LEVEL: WITH ONE ARGUMENT ARG 1>
==> Hook: 'WITH ONE ARGUMENT'
>   1 argument
> Code chunks:
>   'A LABEL' -> \TYPE {<WITH ONE ARGUMENT A CODE: #1>}
>   'B LABEL' -> \TYPE {<WITH ONE ARGUMENT B CODE: #1>}
>   'top-level' -> \TYPE {<WITH ONE ARGUMENT TOP-LEVEL: #1>}
> Execution order:
>   1: 'A LABEL'
>   2: 'B LABEL'
>   3: 'top-level'.
<recently read> }
l. ...  {WITH ONE ARGUMENT}
============================================================
============================================================
TEST 43: WITH ONE ARGUMENT + C LABEL
============================================================
<WITH ONE ARGUMENT A CODE: WITH ONE ARGUMENT ARG 1>
<WITH ONE ARGUMENT C CODE: WITH ONE ARGUMENT ARG 1>
<WITH ONE ARGUMENT B CODE: WITH ONE ARGUMENT ARG 1>
<WITH ONE ARGUMENT TOP-LEVEL: WITH ONE ARGUMENT ARG 1>
==> Hook: 'WITH ONE ARGUMENT'
>   1 argument
> Code chunks:
>   'A LABEL' -> \TYPE {<WITH ONE ARGUMENT A CODE: #1>}
>   'B LABEL' -> \TYPE {<WITH ONE ARGUMENT B CODE: #1>}
>   'C LABEL' -> \TYPE {<WITH ONE ARGUMENT C CODE: #1>}
>   'top-level' -> \TYPE {<WITH ONE ARGUMENT TOP-LEVEL: #1>}
> Default rules:
>   'C LABEL' before 'B LABEL'
> Execution order:
>   1: 'A LABEL'
>   2: 'C LABEL'
>   3: 'B LABEL'
>   4: 'top-level'.
<recently read> }
l. ...  {WITH ONE ARGUMENT}
============================================================
============================================================
TEST 44: WITH ONE ARGUMENT + NEXT
============================================================
==> Hook: 'WITH ONE ARGUMENT'
>   1 argument
> Code chunks:
>   'A LABEL' -> \TYPE {<WITH ONE ARGUMENT A CODE: #1>}
>   'B LABEL' -> \TYPE {<WITH ONE ARGUMENT B CODE: #1>}
>   'C LABEL' -> \TYPE {<WITH ONE ARGUMENT C CODE: #1>}
>   'top-level' -> \TYPE {<WITH ONE ARGUMENT TOP-LEVEL: #1>}
>   next-only -> \TYPE {<WITH ONE ARGUMENT NEXT-ONLY: >}
> Default rules:
>   'C LABEL' before 'B LABEL'
> Execution order:
>   1: 'A LABEL'
>   2: 'C LABEL'
>   3: 'B LABEL'
>   4: 'top-level'
>   5: next-only.
<recently read> }
l. ...  {WITH ONE ARGUMENT}
<WITH ONE ARGUMENT A CODE: WITH ONE ARGUMENT ARG 1>
<WITH ONE ARGUMENT C CODE: WITH ONE ARGUMENT ARG 1>
<WITH ONE ARGUMENT B CODE: WITH ONE ARGUMENT ARG 1>
<WITH ONE ARGUMENT TOP-LEVEL: WITH ONE ARGUMENT ARG 1>
<WITH ONE ARGUMENT NEXT-ONLY: >
==> Hook: 'WITH ONE ARGUMENT'
>   1 argument
> Code chunks:
>   'A LABEL' -> \TYPE {<WITH ONE ARGUMENT A CODE: #1>}
>   'B LABEL' -> \TYPE {<WITH ONE ARGUMENT B CODE: #1>}
>   'C LABEL' -> \TYPE {<WITH ONE ARGUMENT C CODE: #1>}
>   'top-level' -> \TYPE {<WITH ONE ARGUMENT TOP-LEVEL: #1>}
> Default rules:
>   'C LABEL' before 'B LABEL'
> Execution order:
>   1: 'A LABEL'
>   2: 'C LABEL'
>   3: 'B LABEL'
>   4: 'top-level'.
<recently read> }
l. ...  {WITH ONE ARGUMENT}
============================================================
============================================================
TEST 45: WITH ONE ARGUMENT + C LABEL < A LABEL
============================================================
<WITH ONE ARGUMENT C CODE: WITH ONE ARGUMENT ARG 1>
<WITH ONE ARGUMENT A CODE: WITH ONE ARGUMENT ARG 1>
<WITH ONE ARGUMENT B CODE: WITH ONE ARGUMENT ARG 1>
<WITH ONE ARGUMENT TOP-LEVEL: WITH ONE ARGUMENT ARG 1>
==> Hook: 'WITH ONE ARGUMENT'
>   1 argument
> Code chunks:
>   'A LABEL' -> \TYPE {<WITH ONE ARGUMENT A CODE: #1>}
>   'B LABEL' -> \TYPE {<WITH ONE ARGUMENT B CODE: #1>}
>   'C LABEL' -> \TYPE {<WITH ONE ARGUMENT C CODE: #1>}
>   'top-level' -> \TYPE {<WITH ONE ARGUMENT TOP-LEVEL: #1>}
> Default rules:
>   'C LABEL' before 'B LABEL'
> Rules:
>   'C LABEL' before 'A LABEL'
> Execution order:
>   1: 'C LABEL'
>   2: 'A LABEL'
>   3: 'B LABEL'
>   4: 'top-level'.
<recently read> }
l. ...  {WITH ONE ARGUMENT}
============================================================
============================================================
TEST 46: WITH ONE ARGUMENT + DEFAULT: B LABEL > C LABEL
============================================================
<WITH ONE ARGUMENT C CODE: WITH ONE ARGUMENT ARG 1>
<WITH ONE ARGUMENT A CODE: WITH ONE ARGUMENT ARG 1>
<WITH ONE ARGUMENT B CODE: WITH ONE ARGUMENT ARG 1>
<WITH ONE ARGUMENT TOP-LEVEL: WITH ONE ARGUMENT ARG 1>
==> Hook: 'WITH ONE ARGUMENT'
>   1 argument
> Code chunks:
>   'A LABEL' -> \TYPE {<WITH ONE ARGUMENT A CODE: #1>}
>   'B LABEL' -> \TYPE {<WITH ONE ARGUMENT B CODE: #1>}
>   'C LABEL' -> \TYPE {<WITH ONE ARGUMENT C CODE: #1>}
>   'top-level' -> \TYPE {<WITH ONE ARGUMENT TOP-LEVEL: #1>}
> Default rules:
>   'C LABEL' before 'B LABEL'
> Rules:
>   'C LABEL' before 'A LABEL'
> Execution order:
>   1: 'C LABEL'
>   2: 'A LABEL'
>   3: 'B LABEL'
>   4: 'top-level'.
<recently read> }
l. ...  {WITH ONE ARGUMENT}
============================================================
============================================================
============================================================
TEST 47: OTHER HOOK: reversed with one argument
============================================================
============================================================
TEST 48: Undeclared REVERSED WITH ONE ARGUMENT
============================================================
==> Hook: 'REVERSED WITH ONE ARGUMENT'
>   reversed, 1 argument.
<recently read> }
l. ...  {REVERSED WITH ONE ARGUMENT}
============================================================
============================================================
TEST 49: REVERSED WITH ONE ARGUMENT + TOP LEVEL
============================================================
<REVERSED WITH ONE ARGUMENT TOP-LEVEL: REVERSED WITH ONE ARGUMENT ARG 1>
==> Hook: 'REVERSED WITH ONE ARGUMENT'
>   reversed, 1 argument
> Code chunks:
>   'top-level' -> \TYPE {<REVERSED WITH ONE ARGUMENT TOP-LEVEL: #1>}
> Execution order:
>   1: 'top-level'.
<recently read> }
l. ...  {REVERSED WITH ONE ARGUMENT}
============================================================
============================================================
TEST 50: REVERSED WITH ONE ARGUMENT + A LABEL
============================================================
<REVERSED WITH ONE ARGUMENT TOP-LEVEL: REVERSED WITH ONE ARGUMENT ARG 1>
<REVERSED WITH ONE ARGUMENT A CODE: REVERSED WITH ONE ARGUMENT ARG 1>
==> Hook: 'REVERSED WITH ONE ARGUMENT'
>   reversed, 1 argument
> Code chunks:
>   'A LABEL' -> \TYPE {<REVERSED WITH ONE ARGUMENT A CODE: #1>}
>   'top-level' -> \TYPE {<REVERSED WITH ONE ARGUMENT TOP-LEVEL: #1>}
> Execution order:
>   1: 'top-level'
>   2: 'A LABEL'.
<recently read> }
l. ...  {REVERSED WITH ONE ARGUMENT}
============================================================
============================================================
TEST 51: REVERSED WITH ONE ARGUMENT + B LABEL
============================================================
<REVERSED WITH ONE ARGUMENT TOP-LEVEL: REVERSED WITH ONE ARGUMENT ARG 1>
<REVERSED WITH ONE ARGUMENT B CODE: REVERSED WITH ONE ARGUMENT ARG 1>
<REVERSED WITH ONE ARGUMENT A CODE: REVERSED WITH ONE ARGUMENT ARG 1>
==> Hook: 'REVERSED WITH ONE ARGUMENT'
>   reversed, 1 argument
> Code chunks:
>   'A LABEL' -> \TYPE {<REVERSED WITH ONE ARGUMENT A CODE: #1>}
>   'B LABEL' -> \TYPE {<REVERSED WITH ONE ARGUMENT B CODE: #1>}
>   'top-level' -> \TYPE {<REVERSED WITH ONE ARGUMENT TOP-LEVEL: #1>}
> Execution order:
>   1: 'top-level'
>   2: 'B LABEL'
>   3: 'A LABEL'.
<recently read> }
l. ...  {REVERSED WITH ONE ARGUMENT}
============================================================
============================================================
TEST 52: REVERSED WITH ONE ARGUMENT + C LABEL
============================================================
<REVERSED WITH ONE ARGUMENT TOP-LEVEL: REVERSED WITH ONE ARGUMENT ARG 1>
<REVERSED WITH ONE ARGUMENT B CODE: REVERSED WITH ONE ARGUMENT ARG 1>
<REVERSED WITH ONE ARGUMENT C CODE: REVERSED WITH ONE ARGUMENT ARG 1>
<REVERSED WITH ONE ARGUMENT A CODE: REVERSED WITH ONE ARGUMENT ARG 1>
==> Hook: 'REVERSED WITH ONE ARGUMENT'
>   reversed, 1 argument
> Code chunks:
>   'A LABEL' -> \TYPE {<REVERSED WITH ONE ARGUMENT A CODE: #1>}
>   'B LABEL' -> \TYPE {<REVERSED WITH ONE ARGUMENT B CODE: #1>}
>   'C LABEL' -> \TYPE {<REVERSED WITH ONE ARGUMENT C CODE: #1>}
>   'top-level' -> \TYPE {<REVERSED WITH ONE ARGUMENT TOP-LEVEL: #1>}
> Default rules, to be mirrored:
>   'C LABEL' before 'B LABEL'
> Execution order:
>   1: 'top-level'
>   2: 'B LABEL'
>   3: 'C LABEL'
>   4: 'A LABEL'.
<recently read> }
l. ...  {REVERSED WITH ONE ARGUMENT}
============================================================
============================================================
TEST 53: REVERSED WITH ONE ARGUMENT + NEXT
============================================================
==> Hook: 'REVERSED WITH ONE ARGUMENT'
>   reversed, 1 argument
> Code chunks:
>   'A LABEL' -> \TYPE {<REVERSED WITH ONE ARGUMENT A CODE: #1>}
>   'B LABEL' -> \TYPE {<REVERSED WITH ONE ARGUMENT B CODE: #1>}
>   'C LABEL' -> \TYPE {<REVERSED WITH ONE ARGUMENT C CODE: #1>}
>   'top-level' -> \TYPE {<REVERSED WITH ONE ARGUMENT TOP-LEVEL: #1>}
>   next-only -> \TYPE {<REVERSED WITH ONE ARGUMENT NEXT-ONLY: >}
> Default rules, to be mirrored:
>   'C LABEL' before 'B LABEL'
> Execution order:
>   1: 'top-level'
>   2: 'B LABEL'
>   3: 'C LABEL'
>   4: 'A LABEL'
>   5: next-only.
<recently read> }
l. ...  {REVERSED WITH ONE ARGUMENT}
<REVERSED WITH ONE ARGUMENT TOP-LEVEL: REVERSED WITH ONE ARGUMENT ARG 1>
<REVERSED WITH ONE ARGUMENT B CODE: REVERSED WITH ONE ARGUMENT ARG 1>
<REVERSED WITH ONE ARGUMENT C CODE: REVERSED WITH ONE ARGUMENT ARG 1>
<REVERSED WITH ONE ARGUMENT A CODE: REVERSED WITH ONE ARGUMENT ARG 1>
<REVERSED WITH ONE ARGUMENT NEXT-ONLY: >
==> Hook: 'REVERSED WITH ONE ARGUMENT'
>   reversed, 1 argument
> Code chunks:
>   'A LABEL' -> \TYPE {<REVERSED WITH ONE ARGUMENT A CODE: #1>}
>   'B LABEL' -> \TYPE {<REVERSED WITH ONE ARGUMENT B CODE: #1>}
>   'C LABEL' -> \TYPE {<REVERSED WITH ONE ARGUMENT C CODE: #1>}
>   'top-level' -> \TYPE {<REVERSED WITH ONE ARGUMENT TOP-LEVEL: #1>}
> Default rules, to be mirrored:
>   'C LABEL' before 'B LABEL'
> Execution order:
>   1: 'top-level'
>   2: 'B LABEL'
>   3: 'C LABEL'
>   4: 'A LABEL'.
<recently read> }
l. ...  {REVERSED WITH ONE ARGUMENT}
============================================================
============================================================
TEST 54: REVERSED WITH ONE ARGUMENT + C LABEL < A LABEL
============================================================
<REVERSED WITH ONE ARGUMENT TOP-LEVEL: REVERSED WITH ONE ARGUMENT ARG 1>
<REVERSED WITH ONE ARGUMENT B CODE: REVERSED WITH ONE ARGUMENT ARG 1>
<REVERSED WITH ONE ARGUMENT C CODE: REVERSED WITH ONE ARGUMENT ARG 1>
<REVERSED WITH ONE ARGUMENT A CODE: REVERSED WITH ONE ARGUMENT ARG 1>
==> Hook: 'REVERSED WITH ONE ARGUMENT'
>   reversed, 1 argument
> Code chunks:
>   'A LABEL' -> \TYPE {<REVERSED WITH ONE ARGUMENT A CODE: #1>}
>   'B LABEL' -> \TYPE {<REVERSED WITH ONE ARGUMENT B CODE: #1>}
>   'C LABEL' -> \TYPE {<REVERSED WITH ONE ARGUMENT C CODE: #1>}
>   'top-level' -> \TYPE {<REVERSED WITH ONE ARGUMENT TOP-LEVEL: #1>}
> Default rules, to be mirrored:
>   'C LABEL' before 'B LABEL'
> Rules:
>   'C LABEL' before 'A LABEL'
> Execution order:
>   1: 'top-level'
>   2: 'B LABEL'
>   3: 'C LABEL'
>   4: 'A LABEL'.
<recently read> }
l. ...  {REVERSED WITH ONE ARGUMENT}
============================================================
============================================================
TEST 55: REVERSED WITH ONE ARGUMENT + DEFAULT: B LABEL > C LABEL
============================================================
<REVERSED WITH ONE ARGUMENT TOP-LEVEL: REVERSED WITH ONE ARGUMENT ARG 1>
<REVERSED WITH ONE ARGUMENT B CODE: REVERSED WITH ONE ARGUMENT ARG 1>
<REVERSED WITH ONE ARGUMENT C CODE: REVERSED WITH ONE ARGUMENT ARG 1>
<REVERSED WITH ONE ARGUMENT A CODE: REVERSED WITH ONE ARGUMENT ARG 1>
==> Hook: 'REVERSED WITH ONE ARGUMENT'
>   reversed, 1 argument
> Code chunks:
>   'A LABEL' -> \TYPE {<REVERSED WITH ONE ARGUMENT A CODE: #1>}
>   'B LABEL' -> \TYPE {<REVERSED WITH ONE ARGUMENT B CODE: #1>}
>   'C LABEL' -> \TYPE {<REVERSED WITH ONE ARGUMENT C CODE: #1>}
>   'top-level' -> \TYPE {<REVERSED WITH ONE ARGUMENT TOP-LEVEL: #1>}
> Default rules, to be mirrored:
>   'C LABEL' before 'B LABEL'
> Rules:
>   'C LABEL' before 'A LABEL'
> Execution order:
>   1: 'top-level'
>   2: 'B LABEL'
>   3: 'C LABEL'
>   4: 'A LABEL'.
<recently read> }
l. ...  {REVERSED WITH ONE ARGUMENT}
============================================================
============================================================
============================================================
TEST 56: After \begin {document}
============================================================
============================================================
TEST 57: Commands
============================================================
<cmdA BEFORE>
<cmdA BODY>
<cmdA AFTER>
============================================================
<cmdB BEFORE>
<cmdB BODY>
<cmdB AFTER>
============================================================
<cmdOneArgA BEFORE>
<BEFORE:argA 1>
<cmdOneArgA BODY: argA 1>
<cmdOneArgA AFTER>
<AFTER:argA 1>
============================================================
<cmdOneArgB BEFORE>
<BEFORE:argB 1>
<cmdOneArgB BODY: argB 1>
<cmdOneArgB AFTER>
<AFTER:argB 1>
============================================================
============================================================
!!!! If this test changes the documentation needs updating !!!!
