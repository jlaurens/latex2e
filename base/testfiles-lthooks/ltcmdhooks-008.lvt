\ExplSyntaxOn
\debug_on:n { check-declarations , deprecation }
\ExplSyntaxOff

\input{regression-test}

\START

\typeout{=================================}
\def\foo{foo}

\AddToHook{\foo}{before}    \DebugPrintHook{\foo}
\DisableGenericHook{\foo}   \DebugPrintHook{\foo}
\AddToHook{\foo}{after}     \DebugPrintHook{\foo}

\typeout{=================================}
\def\foo{bar}

\AddToHook{\foo}{before}    \DebugPrintHook{\foo}
\NewHook{\foo}              \DebugPrintHook{\foo}
\DisableGenericHook{\foo}   \DebugPrintHook{\foo}

\typeout{=================================}
\def\foo{baz}

\DisableGenericHook{\foo}   \DebugPrintHook{\foo}
\AddToHookNext{\foo}{after} \DebugPrintHook{\foo}

\typeout{=================================}
\def\foo{env/foo/before}

\DisableGenericHook{\foo}   \DebugPrintHook{\foo}
\AddToHookNext{\foo}{after} \DebugPrintHook{\foo}

\typeout{=================================}
\def\foo{cmd/test/before}

\DisableGenericHook{\foo}   \DebugPrintHook{\foo}
\AddToHook{\foo}{after}     \DebugPrintHook{\foo}

\typeout{=================================}
\def\foo{cmd/mycmd/after}

\makeatletter
\def\mycmd{%
  \@ifnextchar[{\mycmdaux}{\mycmdaux[]}}
\def\mycmdaux[#1]{\typeout{#1}}
\makeatother

\AddToHook{\foo}[XXX]{\ERROR 1}
\AddToHookNext{\foo}{\ERROR 2}
\DebugPrintHook{\foo}

% This won't work, so we disable...
\DisableGenericHook{\foo}

% ... and try adding even more code nonetheless :)
\AddToHook{\foo}{\ERROR 3}
\DebugPrintHook{\foo}

\ShowCommand\mycmd

% ... and what happens to this?

\UseHook{\foo}  % not not execute hook so \ERROR should not happen

\END
