This is a generated file for the l3build validation system.
Don't change this file in any respect.
! Use of \??? doesn't match its definition.
<argument> \???  
                 ! LaTeX hooks Error: Empty code label on line .... Using 'to...
l. ...\testme{top-level}
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.
! Use of \??? doesn't match its definition.
<argument> \???  
                 ! LaTeX hooks Error: Empty code label on line .... Using 'to...
l. ...\testme{top-level}
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.
==> Hook: 'foo'
> Code chunks:
>   '..' -> ..
>   '../' -> ../
>   '/' -> /
>   '//' -> //
>   'top-level/' -> top-level/
>   '/./' -> /./
>   '.x' -> .x
>   '/.x' -> /.x
>   '.x/' -> .x/
>   'top-level/foo' -> top-level/foo
>   'top-level/foo/' -> top-level/foo/
>   '/./foo' -> /./foo
>   'top-level' -> top-leveltop-leveltop-level
> Execution order:
>   1: '..'
>   2: '../'
>   3: '/'
>   4: '//'
>   5: 'top-level/'
>   6: '/./'
>   7: '.x'
>   8: '/.x'
>   9: '.x/'
>   10: 'top-level/foo'
>   11: 'top-level/foo/'
>   12: '/./foo'
>   13: 'top-level'.
! Use of \??? doesn't match its definition.
<argument> \???  
                 ! LaTeX hooks Error: Empty code label on line .... Using 'pk...
l. ...  \testme{pkg}
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.
! Use of \??? doesn't match its definition.
<argument> \???  
                 ! LaTeX hooks Error: Empty code label on line .... Using 'pk...
l. ...  \testme{pkg}
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.
==> Hook: 'foo'
> Code chunks:
>   'pkg' -> top-leveltop-levelpkg
>   '..' -> ..
>   '../' -> ../
>   '/' -> /
>   '//' -> //
>   'pkg/' -> pkg/
>   '/./' -> /./
>   '.x' -> .x
>   '/.x' -> /.x
>   '.x/' -> .x/
>   'pkg/foo' -> pkg/foo
>   'pkg/foo/' -> pkg/foo/
>   '/./foo' -> /./foo
> Execution order:
>   1: 'pkg'
>   2: '..'
>   3: '../'
>   4: '/'
>   5: '//'
>   6: 'pkg/'
>   7: '/./'
>   8: '.x'
>   9: '/.x'
>   10: '.x/'
>   11: 'pkg/foo'
>   12: 'pkg/foo/'
>   13: '/./foo'.
==> Hook: 'foo'
> Code chunks:
>   'top-level/foo' -> top-level/foo
> Execution order:
>   1: 'top-level/foo'.
(lthooks-024-pkgA.sty
==> Hook: 'foo'
> Code chunks:
>   'pkgA/foo' -> pkgA/foo
> Execution order:
>   1: 'pkgA/foo'.
(lthooks-024-pkgB.sty
==> Hook: 'foo'
> Code chunks:
>   'lthooks-024-pkgB/foo' -> lthooks-024-pkgB/foo
> Execution order:
>   1: 'lthooks-024-pkgB/foo'.
(lthooks-024-pkgC.sty
==> Hook: 'foo'
> Code chunks:
>   'pkgC/foo' -> pkgC/foo
> Execution order:
>   1: 'pkgC/foo'.
)
==> Hook: 'foo'
> Code chunks:
>   'lthooks-024-pkgB/foo' -> lthooks-024-pkgB/foo
> Execution order:
>   1: 'lthooks-024-pkgB/foo'.
)
==> Hook: 'foo'
> Code chunks:
>   'pkgA/foo' -> pkgA/foo
> Execution order:
>   1: 'pkgA/foo'.
)
==> Hook: 'foo'
> Code chunks:
>   'top-level/foo' -> top-level/foo
> Execution order:
>   1: 'top-level/foo'.
==> Hook: 'foo'
> Code chunks:
>   'my-document/foo' -> my-document/foo
> Execution order:
>   1: 'my-document/foo'.
(lthooks-024-pkgA.sty
==> Hook: 'foo'
> Code chunks:
>   'pkgA/foo' -> pkgA/foo
> Execution order:
>   1: 'pkgA/foo'.
(lthooks-024-pkgB.sty
==> Hook: 'foo'
> Code chunks:
>   'lthooks-024-pkgB/foo' -> lthooks-024-pkgB/foo
> Execution order:
>   1: 'lthooks-024-pkgB/foo'.
(lthooks-024-pkgC.sty
==> Hook: 'foo'
> Code chunks:
>   'pkgC/foo' -> pkgC/foo
> Execution order:
>   1: 'pkgC/foo'.
)
==> Hook: 'foo'
> Code chunks:
>   'lthooks-024-pkgB/foo' -> lthooks-024-pkgB/foo
> Execution order:
>   1: 'lthooks-024-pkgB/foo'.
)
==> Hook: 'foo'
> Code chunks:
>   'pkgA/foo' -> pkgA/foo
> Execution order:
>   1: 'pkgA/foo'.
)
==> Hook: 'foo'
> Code chunks:
>   'my-document/foo' -> my-document/foo
> Execution order:
>   1: 'my-document/foo'.
