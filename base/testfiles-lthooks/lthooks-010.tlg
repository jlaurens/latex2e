This is a generated file for the l3build validation system.
Don't change this file in any respect.
The property list \g__hook_sffamily_code_prop contains the pairs (without
outer braces):
>  {legacy}  =>  {Std sffamily code}
>  {foo}  =>  {foo code}
>  {bar}  =>  {bar code}.
<recently read> }
l. ...\prop_show:c{g__hook_sffamily_code_prop}
<<< Hook: 'sffamily'
... Attributes:
...   deprecated_generic: N
...   generic: N
...   declared: Y
...   structure_exist: Y
...   usable: Y
...   disabled: N
...   empty: N
...   reversed: N
...   generic_reversed: N
...   consumed: N
...   # of arguments: 0
... Code chunks:
...   'legacy' -> Std sffamily code
...   'foo' -> foo code
...   'bar' -> bar code
...   'top level' empty
...   next-only-> \typeout {first occasion only $\frac 12$} \AddToHookNext {sffamily}{\typeout {on second only}}
... Default rules:
...   None
... Rules:
...   'foo' > 'bar'
... Execution order:
...   'legacy', 'bar', 'foo'
>>>
(../l3backend-pdftex.def
File: l3backend-pdftex.def ....-..-.. L3 backend support: PDF output (pdfTeX)
\l__color_backend_stack_int=\count...
\l__pdf_internal_box=\box...
)
No file lthooks-010.aux.
LaTeX Font Info:    Checking defaults for OML/cmm/m/it on input line ....
LaTeX Font Info:    ... okay on input line ....
LaTeX Font Info:    Checking defaults for OMS/cmsy/m/n on input line ....
LaTeX Font Info:    ... okay on input line ....
LaTeX Font Info:    Checking defaults for OT1/cmr/m/n on input line ....
LaTeX Font Info:    ... okay on input line ....
LaTeX Font Info:    Checking defaults for T1/cmr/m/n on input line ....
LaTeX Font Info:    ... okay on input line ....
LaTeX Font Info:    Checking defaults for TS1/cmr/m/n on input line ....
LaTeX Font Info:    ... okay on input line ....
LaTeX Font Info:    Checking defaults for OMX/cmex/m/n on input line ....
LaTeX Font Info:    ... okay on input line ....
LaTeX Font Info:    Checking defaults for U/cmr/m/n on input line ....
LaTeX Font Info:    ... okay on input line ....
first occasion only $\frac 12$
<<< Hook: 'sffamily'
... Attributes:
...   deprecated_generic: N
...   generic: N
...   declared: Y
...   structure_exist: Y
...   usable: Y
...   disabled: N
...   empty: N
...   reversed: N
...   generic_reversed: N
...   consumed: N
...   # of arguments: 0
... Code chunks:
...   'legacy' -> Std sffamily code
...   'foo' -> foo code
...   'bar' -> bar code
...   'top level' empty
...   next-only-> \typeout {on second only}
... Default rules:
...   None
... Rules:
...   'foo' > 'bar'
... Execution order:
...   'legacy', 'bar', 'foo'
>>>
<<< Hook: 'sffamily'
... Attributes:
...   deprecated_generic: N
...   generic: N
...   declared: Y
...   structure_exist: Y
...   usable: Y
...   disabled: N
...   empty: N
...   reversed: N
...   generic_reversed: N
...   consumed: N
...   # of arguments: 0
... Code chunks:
...   'legacy' -> Std sffamily code
...   'foo' -> foo code
...   'bar' -> bar code
...   'baz' -> baz code
...   'top level' empty
...   next-only-> \typeout {on second only}
... Default rules:
...   None
... Rules:
...   'foo' > 'bar'
...   'foo' <- 'baz'
... Execution order:
...   'legacy', 'bar', 'baz', 'foo'
>>>
on second only
<<< Hook: 'sffamily'
... Attributes:
...   deprecated_generic: N
...   generic: N
...   declared: Y
...   structure_exist: Y
...   usable: Y
...   disabled: N
...   empty: N
...   reversed: N
...   generic_reversed: N
...   consumed: N
...   # of arguments: 0
... Code chunks:
...   'legacy' -> Std sffamily code
...   'foo' -> foo code
...   'bar' -> bar code
...   'baz' -> baz code
...   'top level' empty
...   next-only empty
... Default rules:
...   None
... Rules:
...   'foo' > 'bar'
...   'foo' <- 'baz'
... Execution order:
...   'legacy', 'bar', 'baz', 'foo'
>>>
The property list \g__hook_sffamily_code_prop contains the pairs (without
outer braces):
>  {legacy}  =>  {Std sffamily code}
>  {foo}  =>  {foo code}
>  {bar}  =>  {bar code}
>  {baz}  =>  {baz code}.
<recently read> }
l. ...\prop_show:c{g__hook_sffamily_code_prop}
<<< Hook: 'sffamily'
... Attributes:
...   deprecated_generic: N
...   generic: N
...   declared: Y
...   structure_exist: Y
...   usable: Y
...   disabled: N
...   empty: N
...   reversed: N
...   generic_reversed: N
...   consumed: N
...   # of arguments: 0
... Code chunks:
...   'legacy' -> Std sffamily code
...   'foo' -> foo code
...   'bar' -> bar code
...   'baz' -> baz code
...   'top level' empty
...   next-only empty
... Default rules:
...   None
... Rules:
...   'foo' > 'bar'
...   'foo' <- 'baz'
... Execution order:
...   'legacy', 'bar', 'baz', 'foo'
>>>
<<< Hook: 'enddocument'
... Attributes:
...   deprecated_generic: N
...   generic: N
...   declared: Y
...   structure_exist: Y
...   usable: Y
...   disabled: N
...   empty: Y
...   reversed: N
...   generic_reversed: N
...   consumed: N
...   # of arguments: 0
... Code chunks:
...   'top level' empty
...   next-only empty
... Default rules:
...   None
... Rules:
...   None
... Execution order:
...   None
>>>
--- New hook after begin document ---
<<< Hook: 'xxx'
... Attributes:
...   deprecated_generic: N
...   generic: N
...   declared: Y
...   structure_exist: Y
...   usable: Y
...   disabled: N
...   empty: Y
...   reversed: N
...   generic_reversed: N
...   consumed: N
...   # of arguments: 0
... Code chunks:
...   'top level' empty
...   next-only empty
... Default rules:
...   None
... Rules:
...   None
... Execution order:
...   None
>>>
<<< Hook: 'xxx'
... Attributes:
...   deprecated_generic: N
...   generic: N
...   declared: Y
...   structure_exist: Y
...   usable: Y
...   disabled: N
...   empty: N
...   reversed: N
...   generic_reversed: N
...   consumed: N
...   # of arguments: 0
... Code chunks:
...   'foo' -> \typeout {some foo code ...}
...   'top level' -> \typeout {some code ...}
...   next-only empty
... Default rules:
...   None
... Rules:
...   None
... Execution order:
...   'foo'
>>>
some foo code ...
some code ...
<<< Hook: 'xxx'
... Attributes:
...   deprecated_generic: N
...   generic: N
...   declared: Y
...   structure_exist: Y
...   usable: Y
...   disabled: N
...   empty: Y
...   reversed: N
...   generic_reversed: N
...   consumed: N
...   # of arguments: 0
... Code chunks:
...   'top level' empty
...   next-only empty
... Default rules:
...   None
... Rules:
...   None
... Execution order:
...   None
>>>
