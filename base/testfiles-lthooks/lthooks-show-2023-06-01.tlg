This is a generated file for the l3build validation system.
Don't change this file in any respect.
============================================================
TEST 1: Environment: envA
============================================================
-> The generic hook 'env/envA/before':
> The hook is not declared.
> The hook is empty.
<recently read> }
l. ...  {envA}
-> The generic hook 'env/envA/begin':
> The hook is not declared.
> The hook is empty.
<recently read> }
l. ...  {envA}
-> The generic hook 'env/envA/end':
> The hook is not declared.
> The hook is empty.
<recently read> }
l. ...  {envA}
-> The generic hook 'env/envA/after':
> The hook is not declared.
> The hook is empty.
<recently read> }
l. ...  {envA}
-> The generic hook 'env/envA/before':
> Code chunks:
>     ---
> Document-level (top-level) code (executed last):
>     -> \TYPE {<envA BEFORE>}
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     ---.
<recently read> }
l. ...  {envA}
-> The generic hook 'env/envA/begin':
> Code chunks:
>     ---
> Document-level (top-level) code (executed last):
>     -> \TYPE {<envA BEGIN>}
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     ---.
<recently read> }
l. ...  {envA}
-> The generic hook 'env/envA/end':
> Code chunks:
>     ---
> Document-level (top-level) code (executed last):
>     -> \TYPE {<envA END>}
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     ---.
<recently read> }
l. ...  {envA}
-> The generic hook 'env/envA/after':
> Code chunks:
>     ---
> Document-level (top-level) code (executed first):
>     -> \TYPE {<envA AFTER>}
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order (after reversal):
>     ---.
<recently read> }
l. ...  {envA}
============================================================
<envA BEFORE>
<envA BEGIN>
<BEGIN{envA}>
<envA BODY>
<envA END>
<END{envA}>
<envA AFTER>
============================================================
TEST 2: Environment: envB
============================================================
-> The generic hook 'env/envB/before':
> The hook is not declared.
> The hook is empty.
<recently read> }
l. ...  {envB}
-> The generic hook 'env/envB/begin':
> The hook is not declared.
> The hook is empty.
<recently read> }
l. ...  {envB}
-> The generic hook 'env/envB/end':
> The hook is not declared.
> The hook is empty.
<recently read> }
l. ...  {envB}
-> The generic hook 'env/envB/after':
> The hook is not declared.
> The hook is empty.
<recently read> }
l. ...  {envB}
-> The generic hook 'env/envB/before':
> Code chunks:
>     ---
> Document-level (top-level) code (executed last):
>     -> \TYPE {<envB BEFORE>}
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     ---.
<recently read> }
l. ...  {envB}
-> The generic hook 'env/envB/begin':
> Code chunks:
>     ---
> Document-level (top-level) code (executed last):
>     -> \TYPE {<envB BEGIN>}
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     ---.
<recently read> }
l. ...  {envB}
-> The generic hook 'env/envB/end':
> Code chunks:
>     ---
> Document-level (top-level) code (executed last):
>     -> \TYPE {<envB END>}
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     ---.
<recently read> }
l. ...  {envB}
-> The generic hook 'env/envB/after':
> Code chunks:
>     ---
> Document-level (top-level) code (executed first):
>     -> \TYPE {<envB AFTER>}
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order (after reversal):
>     ---.
<recently read> }
l. ...  {envB}
============================================================
<envB BEFORE>
<envB BEGIN>
<BEGIN{envB}>
<envB BODY>
<envB END>
<END{envB}>
<envB AFTER>
============================================================
TEST 3: Command: Undefined command with no arguments
============================================================
-> The generic hook 'cmd/cmdA/before':
> The hook is not declared.
> The hook is empty.
<recently read> }
l. ...  {cmdA}
-> The generic hook 'cmd/cmdA/after':
> The hook is not declared.
> The hook is empty.
<recently read> }
l. ...  {cmdA}
-> The generic hook 'cmd/cmdA/before' (unknown arguments):
> Code chunks:
>     ---
> Document-level (top-level) code (executed last):
>     -> \TYPE {<cmdA BEFORE>}
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     ---.
<recently read> }
l. ...  {cmdA}
-> The generic hook 'cmd/cmdA/after' (unknown arguments):
> Code chunks:
>     ---
> Document-level (top-level) code (executed first):
>     -> \TYPE {<cmdA AFTER>}
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order (after reversal):
>     ---.
<recently read> }
l. ...  {cmdA}
============================================================
<cmdA BODY>
============================================================
TEST 4: Command: Defined command with no arguments
============================================================
-> The generic hook 'cmd/cmdB/before':
> The hook is not declared.
> The hook is empty.
<recently read> }
l. ...  {cmdB}
-> The generic hook 'cmd/cmdB/after':
> The hook is not declared.
> The hook is empty.
<recently read> }
l. ...  {cmdB}
-> The generic hook 'cmd/cmdB/before' (unknown arguments):
> Code chunks:
>     ---
> Document-level (top-level) code (executed last):
>     -> \TYPE {<cmdB BEFORE>}
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     ---.
<recently read> }
l. ...  {cmdB}
-> The generic hook 'cmd/cmdB/after' (unknown arguments):
> Code chunks:
>     ---
> Document-level (top-level) code (executed first):
>     -> \TYPE {<cmdB AFTER>}
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order (after reversal):
>     ---.
<recently read> }
l. ...  {cmdB}
============================================================
<cmdA BODY>
============================================================
TEST 5: Command: Undefined with two arguments
============================================================
-> The generic hook 'cmd/cmdTwoArgsA/before':
> The hook is not declared.
> The hook is empty.
<recently read> }
l. ...  {2}
-> The generic hook 'cmd/cmdTwoArgsA/after':
> The hook is not declared.
> The hook is empty.
<recently read> }
l. ...  {2}
-> The generic hook 'cmd/cmdTwoArgsA/before' (unknown arguments):
> Code chunks:
>     ---
> Document-level (top-level) code (executed last):
>     -> \TYPE {<cmdTwoArgsA BEFORE: /#1/#2/>}
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     ---.
<recently read> }
l. ...  {2}
-> The generic hook 'cmd/cmdTwoArgsA/after' (unknown arguments):
> Code chunks:
>     ---
> Document-level (top-level) code (executed first):
>     -> \TYPE {<cmdTwoArgsA AFTER: /#1/#2/>}
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order (after reversal):
>     ---.
<recently read> }
l. ...  {2}
============================================================
<cmdTwoArgsA BODY: /argA 1/argA 2/>
============================================================
TEST 6: Command: Defined with two arguments
============================================================
-> The generic hook 'cmd/cmdTwoArgsB/before':
> The hook is not declared.
> The hook is empty.
<recently read> }
l. ...  {2}
-> The generic hook 'cmd/cmdTwoArgsB/after':
> The hook is not declared.
> The hook is empty.
<recently read> }
l. ...  {2}
-> The generic hook 'cmd/cmdTwoArgsB/before' (unknown arguments):
> Code chunks:
>     ---
> Document-level (top-level) code (executed last):
>     -> \TYPE {<cmdTwoArgsB BEFORE: /#1/#2/>}
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     ---.
<recently read> }
l. ...  {2}
-> The generic hook 'cmd/cmdTwoArgsB/after' (unknown arguments):
> Code chunks:
>     ---
> Document-level (top-level) code (executed first):
>     -> \TYPE {<cmdTwoArgsB AFTER: /#1/#2/>}
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order (after reversal):
>     ---.
<recently read> }
l. ...  {2}
============================================================
<cmdTwoArgsB BODY: /argB 1/argB 2/>
============================================================
TEST 7: Custom generic hook: CUSTOM GENERIC HOOK
============================================================
============================================================
TEST 8: Raw: CUSTOM GENERIC HOOK
============================================================
-> The hook 'CUSTOM GENERIC HOOK':
> The hook is not declared.
> Code chunks:
>     LABEL -> \TYPE {<CUSTOM GENERIC HOOK CODE>}
> Document-level (top-level) code:
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     Not set because the hook is undeclared.
<recently read> }
l. ...  {CUSTOM GENERIC HOOK}
============================================================
============================================================
TEST 9: Activated: CUSTOM GENERIC HOOK
============================================================
<CUSTOM GENERIC HOOK CODE>
-> The hook 'CUSTOM GENERIC HOOK':
> Code chunks:
>     LABEL -> \TYPE {<CUSTOM GENERIC HOOK CODE>}
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     LABEL.
<recently read> }
l. ...  {CUSTOM GENERIC HOOK}
============================================================
============================================================
TEST 10: Disabled: CUSTOM GENERIC HOOK
============================================================
-> The hook 'CUSTOM GENERIC HOOK':
> The hook is not declared.
> The hook is disabled.
> Code chunks:
>     LABEL -> \TYPE {<CUSTOM GENERIC HOOK CODE>}
> Document-level (top-level) code:
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     Not set because the hook is disabled.
<recently read> }
l. ...  {CUSTOM GENERIC HOOK}
============================================================
============================================================
============================================================
TEST 11: OTHER HOOK: Undeclared
============================================================
============================================================
TEST 12: Undeclared UNDECLARED HOOK
============================================================
-> The hook 'UNDECLARED HOOK':
> The hook is not declared.
> The hook is empty.
<recently read> }
l. ...  {UNDECLARED HOOK}
============================================================
============================================================
TEST 13: UNDECLARED HOOK + TOP-LEVEL
============================================================
-> The hook 'UNDECLARED HOOK':
> The hook is not declared.
> Code chunks:
>     ---
> Document-level (top-level) code:
>     -> \TYPE {<UNDECLARED HOOK TOP-LEVEL>}
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     Not set because the hook is undeclared.
<recently read> }
l. ...  {UNDECLARED HOOK}
============================================================
============================================================
TEST 14: UNDECLARED HOOK + A LABEL
============================================================
-> The hook 'UNDECLARED HOOK':
> The hook is not declared.
> Code chunks:
>     A LABEL -> \TYPE {<UNDECLARED HOOK A CODE>}
> Document-level (top-level) code:
>     -> \TYPE {<UNDECLARED HOOK TOP-LEVEL>}
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     Not set because the hook is undeclared.
<recently read> }
l. ...  {UNDECLARED HOOK}
============================================================
============================================================
TEST 15: UNDECLARED HOOK + B LABEL
============================================================
-> The hook 'UNDECLARED HOOK':
> The hook is not declared.
> Code chunks:
>     A LABEL -> \TYPE {<UNDECLARED HOOK A CODE>}
>     B LABEL -> \TYPE {<UNDECLARED HOOK B CODE>}
> Document-level (top-level) code:
>     -> \TYPE {<UNDECLARED HOOK TOP-LEVEL>}
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     Not set because the hook is undeclared.
<recently read> }
l. ...  {UNDECLARED HOOK}
============================================================
============================================================
TEST 16: UNDECLARED HOOK + C LABEL
============================================================
-> The hook 'UNDECLARED HOOK':
> The hook is not declared.
> Code chunks:
>     A LABEL -> \TYPE {<UNDECLARED HOOK A CODE>}
>     B LABEL -> \TYPE {<UNDECLARED HOOK B CODE>}
>     C LABEL -> \TYPE {<UNDECLARED HOOK C CODE>}
> Document-level (top-level) code:
>     -> \TYPE {<UNDECLARED HOOK TOP-LEVEL>}
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     Not set because the hook is undeclared.
<recently read> }
l. ...  {UNDECLARED HOOK}
============================================================
============================================================
TEST 17: UNDECLARED HOOK + NEXT
============================================================
-> The hook 'UNDECLARED HOOK':
> The hook is not declared.
> Code chunks:
>     A LABEL -> \TYPE {<UNDECLARED HOOK A CODE>}
>     B LABEL -> \TYPE {<UNDECLARED HOOK B CODE>}
>     C LABEL -> \TYPE {<UNDECLARED HOOK C CODE>}
> Document-level (top-level) code:
>     -> \TYPE {<UNDECLARED HOOK TOP-LEVEL>}
> Extra code for next invocation:
>     -> \TYPE {<NEXT-ONLY>}
> Rules:
>     ---
> Execution order:
>     Not set because the hook is undeclared.
<recently read> }
l. ...  {UNDECLARED HOOK}
-> The hook 'UNDECLARED HOOK':
> The hook is not declared.
> Code chunks:
>     A LABEL -> \TYPE {<UNDECLARED HOOK A CODE>}
>     B LABEL -> \TYPE {<UNDECLARED HOOK B CODE>}
>     C LABEL -> \TYPE {<UNDECLARED HOOK C CODE>}
> Document-level (top-level) code:
>     -> \TYPE {<UNDECLARED HOOK TOP-LEVEL>}
> Extra code for next invocation:
>     -> \TYPE {<NEXT-ONLY>}
> Rules:
>     ---
> Execution order:
>     Not set because the hook is undeclared.
<recently read> }
l. ...  {UNDECLARED HOOK}
============================================================
============================================================
TEST 18: UNDECLARED HOOK + C LABEL < A LABEL
============================================================
-> The hook 'UNDECLARED HOOK':
> The hook is not declared.
> Code chunks:
>     A LABEL -> \TYPE {<UNDECLARED HOOK A CODE>}
>     B LABEL -> \TYPE {<UNDECLARED HOOK B CODE>}
>     C LABEL -> \TYPE {<UNDECLARED HOOK C CODE>}
> Document-level (top-level) code:
>     -> \TYPE {<UNDECLARED HOOK TOP-LEVEL>}
> Extra code for next invocation:
>     -> \TYPE {<NEXT-ONLY>}
> Rules:
>     C LABEL|A LABEL with relation <
> Execution order:
>     Not set because the hook is undeclared.
<recently read> }
l. ...  {UNDECLARED HOOK}
============================================================
============================================================
TEST 19: UNDECLARED HOOK + DEFAULT: B LABEL > C LABEL
============================================================
-> The hook 'UNDECLARED HOOK':
> The hook is not declared.
> Code chunks:
>     A LABEL -> \TYPE {<UNDECLARED HOOK A CODE>}
>     B LABEL -> \TYPE {<UNDECLARED HOOK B CODE>}
>     C LABEL -> \TYPE {<UNDECLARED HOOK C CODE>}
> Document-level (top-level) code:
>     -> \TYPE {<UNDECLARED HOOK TOP-LEVEL>}
> Extra code for next invocation:
>     -> \TYPE {<NEXT-ONLY>}
> Rules:
>     C LABEL|A LABEL with relation <
>     C LABEL|B LABEL with default relation <
> Execution order:
>     Not set because the hook is undeclared.
<recently read> }
l. ...  {UNDECLARED HOOK}
============================================================
============================================================
============================================================
TEST 20: OTHER HOOK: declared
============================================================
============================================================
TEST 21: Undeclared DECLARED HOOK
============================================================
-> The hook 'DECLARED HOOK':
> The hook is empty.
<recently read> }
l. ...  {DECLARED HOOK}
============================================================
============================================================
TEST 22: DECLARED HOOK + TOP-LEVEL
============================================================
<DECLARED HOOK TOP-LEVEL>
-> The hook 'DECLARED HOOK':
> Code chunks:
>     ---
> Document-level (top-level) code (executed last):
>     -> \TYPE {<DECLARED HOOK TOP-LEVEL>}
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     ---.
<recently read> }
l. ...  {DECLARED HOOK}
============================================================
============================================================
TEST 23: DECLARED HOOK + A LABEL
============================================================
<DECLARED HOOK A CODE>
<DECLARED HOOK TOP-LEVEL>
-> The hook 'DECLARED HOOK':
> Code chunks:
>     A LABEL -> \TYPE {<DECLARED HOOK A CODE>}
> Document-level (top-level) code (executed last):
>     -> \TYPE {<DECLARED HOOK TOP-LEVEL>}
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     A LABEL.
<recently read> }
l. ...  {DECLARED HOOK}
============================================================
============================================================
TEST 24: DECLARED HOOK + B LABEL
============================================================
<DECLARED HOOK A CODE>
<DECLARED HOOK B CODE>
<DECLARED HOOK TOP-LEVEL>
-> The hook 'DECLARED HOOK':
> Code chunks:
>     A LABEL -> \TYPE {<DECLARED HOOK A CODE>}
>     B LABEL -> \TYPE {<DECLARED HOOK B CODE>}
> Document-level (top-level) code (executed last):
>     -> \TYPE {<DECLARED HOOK TOP-LEVEL>}
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     A LABEL, B LABEL.
<recently read> }
l. ...  {DECLARED HOOK}
============================================================
============================================================
TEST 25: DECLARED HOOK + C LABEL
============================================================
<DECLARED HOOK A CODE>
<DECLARED HOOK C CODE>
<DECLARED HOOK B CODE>
<DECLARED HOOK TOP-LEVEL>
-> The hook 'DECLARED HOOK':
> Code chunks:
>     A LABEL -> \TYPE {<DECLARED HOOK A CODE>}
>     B LABEL -> \TYPE {<DECLARED HOOK B CODE>}
>     C LABEL -> \TYPE {<DECLARED HOOK C CODE>}
> Document-level (top-level) code (executed last):
>     -> \TYPE {<DECLARED HOOK TOP-LEVEL>}
> Extra code for next invocation:
>     ---
> Rules:
>     C LABEL|B LABEL with default relation <
> Execution order (after applying rules):
>     A LABEL, C LABEL, B LABEL.
<recently read> }
l. ...  {DECLARED HOOK}
============================================================
============================================================
TEST 26: DECLARED HOOK + NEXT
============================================================
-> The hook 'DECLARED HOOK':
> Code chunks:
>     A LABEL -> \TYPE {<DECLARED HOOK A CODE>}
>     B LABEL -> \TYPE {<DECLARED HOOK B CODE>}
>     C LABEL -> \TYPE {<DECLARED HOOK C CODE>}
> Document-level (top-level) code (executed last):
>     -> \TYPE {<DECLARED HOOK TOP-LEVEL>}
> Extra code for next invocation:
>     -> \TYPE {<NEXT-ONLY>}
> Rules:
>     C LABEL|B LABEL with default relation <
> Execution order (after applying rules):
>     A LABEL, C LABEL, B LABEL.
<recently read> }
l. ...  {DECLARED HOOK}
<DECLARED HOOK A CODE>
<DECLARED HOOK C CODE>
<DECLARED HOOK B CODE>
<DECLARED HOOK TOP-LEVEL>
<NEXT-ONLY>
-> The hook 'DECLARED HOOK':
> Code chunks:
>     A LABEL -> \TYPE {<DECLARED HOOK A CODE>}
>     B LABEL -> \TYPE {<DECLARED HOOK B CODE>}
>     C LABEL -> \TYPE {<DECLARED HOOK C CODE>}
> Document-level (top-level) code (executed last):
>     -> \TYPE {<DECLARED HOOK TOP-LEVEL>}
> Extra code for next invocation:
>     ---
> Rules:
>     C LABEL|B LABEL with default relation <
> Execution order (after applying rules):
>     A LABEL, C LABEL, B LABEL.
<recently read> }
l. ...  {DECLARED HOOK}
============================================================
============================================================
TEST 27: DECLARED HOOK + C LABEL < A LABEL
============================================================
<DECLARED HOOK C CODE>
<DECLARED HOOK A CODE>
<DECLARED HOOK B CODE>
<DECLARED HOOK TOP-LEVEL>
-> The hook 'DECLARED HOOK':
> Code chunks:
>     A LABEL -> \TYPE {<DECLARED HOOK A CODE>}
>     B LABEL -> \TYPE {<DECLARED HOOK B CODE>}
>     C LABEL -> \TYPE {<DECLARED HOOK C CODE>}
> Document-level (top-level) code (executed last):
>     -> \TYPE {<DECLARED HOOK TOP-LEVEL>}
> Extra code for next invocation:
>     ---
> Rules:
>     C LABEL|A LABEL with relation <
>     C LABEL|B LABEL with default relation <
> Execution order (after applying rules):
>     C LABEL, A LABEL, B LABEL.
<recently read> }
l. ...  {DECLARED HOOK}
============================================================
============================================================
TEST 28: DECLARED HOOK + DEFAULT: B LABEL > C LABEL
============================================================
<DECLARED HOOK C CODE>
<DECLARED HOOK A CODE>
<DECLARED HOOK B CODE>
<DECLARED HOOK TOP-LEVEL>
-> The hook 'DECLARED HOOK':
> Code chunks:
>     A LABEL -> \TYPE {<DECLARED HOOK A CODE>}
>     B LABEL -> \TYPE {<DECLARED HOOK B CODE>}
>     C LABEL -> \TYPE {<DECLARED HOOK C CODE>}
> Document-level (top-level) code (executed last):
>     -> \TYPE {<DECLARED HOOK TOP-LEVEL>}
> Extra code for next invocation:
>     ---
> Rules:
>     C LABEL|A LABEL with relation <
>     C LABEL|B LABEL with default relation <
> Execution order (after applying rules):
>     C LABEL, A LABEL, B LABEL.
<recently read> }
l. ...  {DECLARED HOOK}
============================================================
============================================================
============================================================
TEST 29: OTHER HOOK: declared reversed
============================================================
============================================================
TEST 30: Undeclared DECLARED REVERSED
============================================================
-> The hook 'DECLARED REVERSED':
> The hook is empty.
<recently read> }
l. ...  {DECLARED REVERSED}
============================================================
============================================================
TEST 31: DECLARED REVERSED + TOP-LEVEL
============================================================
<DECLARED REVERSED TOP-LEVEL>
-> The hook 'DECLARED REVERSED':
> Code chunks:
>     ---
> Document-level (top-level) code (executed first):
>     -> \TYPE {<DECLARED REVERSED TOP-LEVEL>}
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order (after reversal):
>     ---.
<recently read> }
l. ...  {DECLARED REVERSED}
============================================================
============================================================
TEST 32: DECLARED REVERSED + A LABEL
============================================================
<DECLARED REVERSED TOP-LEVEL>
<DECLARED REVERSED A CODE>
-> The hook 'DECLARED REVERSED':
> Code chunks:
>     A LABEL -> \TYPE {<DECLARED REVERSED A CODE>}
> Document-level (top-level) code (executed first):
>     -> \TYPE {<DECLARED REVERSED TOP-LEVEL>}
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order (after reversal):
>     A LABEL.
<recently read> }
l. ...  {DECLARED REVERSED}
============================================================
============================================================
TEST 33: DECLARED REVERSED + B LABEL
============================================================
<DECLARED REVERSED TOP-LEVEL>
<DECLARED REVERSED B CODE>
<DECLARED REVERSED A CODE>
-> The hook 'DECLARED REVERSED':
> Code chunks:
>     A LABEL -> \TYPE {<DECLARED REVERSED A CODE>}
>     B LABEL -> \TYPE {<DECLARED REVERSED B CODE>}
> Document-level (top-level) code (executed first):
>     -> \TYPE {<DECLARED REVERSED TOP-LEVEL>}
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order (after reversal):
>     B LABEL, A LABEL.
<recently read> }
l. ...  {DECLARED REVERSED}
============================================================
============================================================
TEST 34: DECLARED REVERSED + C LABEL
============================================================
<DECLARED REVERSED TOP-LEVEL>
<DECLARED REVERSED B CODE>
<DECLARED REVERSED C CODE>
<DECLARED REVERSED A CODE>
-> The hook 'DECLARED REVERSED':
> Code chunks:
>     A LABEL -> \TYPE {<DECLARED REVERSED A CODE>}
>     B LABEL -> \TYPE {<DECLARED REVERSED B CODE>}
>     C LABEL -> \TYPE {<DECLARED REVERSED C CODE>}
> Document-level (top-level) code (executed first):
>     -> \TYPE {<DECLARED REVERSED TOP-LEVEL>}
> Extra code for next invocation:
>     ---
> Rules:
>     C LABEL|B LABEL with default relation <
> Execution order (after reversal and applying rules):
>     B LABEL, C LABEL, A LABEL.
<recently read> }
l. ...  {DECLARED REVERSED}
============================================================
============================================================
TEST 35: DECLARED REVERSED + NEXT
============================================================
-> The hook 'DECLARED REVERSED':
> Code chunks:
>     A LABEL -> \TYPE {<DECLARED REVERSED A CODE>}
>     B LABEL -> \TYPE {<DECLARED REVERSED B CODE>}
>     C LABEL -> \TYPE {<DECLARED REVERSED C CODE>}
> Document-level (top-level) code (executed first):
>     -> \TYPE {<DECLARED REVERSED TOP-LEVEL>}
> Extra code for next invocation:
>     -> \TYPE {<NEXT-ONLY>}
> Rules:
>     C LABEL|B LABEL with default relation <
> Execution order (after reversal and applying rules):
>     B LABEL, C LABEL, A LABEL.
<recently read> }
l. ...  {DECLARED REVERSED}
<DECLARED REVERSED TOP-LEVEL>
<DECLARED REVERSED B CODE>
<DECLARED REVERSED C CODE>
<DECLARED REVERSED A CODE>
<NEXT-ONLY>
-> The hook 'DECLARED REVERSED':
> Code chunks:
>     A LABEL -> \TYPE {<DECLARED REVERSED A CODE>}
>     B LABEL -> \TYPE {<DECLARED REVERSED B CODE>}
>     C LABEL -> \TYPE {<DECLARED REVERSED C CODE>}
> Document-level (top-level) code (executed first):
>     -> \TYPE {<DECLARED REVERSED TOP-LEVEL>}
> Extra code for next invocation:
>     ---
> Rules:
>     C LABEL|B LABEL with default relation <
> Execution order (after reversal and applying rules):
>     B LABEL, C LABEL, A LABEL.
<recently read> }
l. ...  {DECLARED REVERSED}
============================================================
============================================================
TEST 36: DECLARED REVERSED + C LABEL < A LABEL
============================================================
<DECLARED REVERSED TOP-LEVEL>
<DECLARED REVERSED B CODE>
<DECLARED REVERSED C CODE>
<DECLARED REVERSED A CODE>
-> The hook 'DECLARED REVERSED':
> Code chunks:
>     A LABEL -> \TYPE {<DECLARED REVERSED A CODE>}
>     B LABEL -> \TYPE {<DECLARED REVERSED B CODE>}
>     C LABEL -> \TYPE {<DECLARED REVERSED C CODE>}
> Document-level (top-level) code (executed first):
>     -> \TYPE {<DECLARED REVERSED TOP-LEVEL>}
> Extra code for next invocation:
>     ---
> Rules:
>     C LABEL|A LABEL with relation <
>     C LABEL|B LABEL with default relation <
> Execution order (after reversal and applying rules):
>     B LABEL, C LABEL, A LABEL.
<recently read> }
l. ...  {DECLARED REVERSED}
============================================================
============================================================
TEST 37: DECLARED REVERSED + DEFAULT: B LABEL > C LABEL
============================================================
<DECLARED REVERSED TOP-LEVEL>
<DECLARED REVERSED B CODE>
<DECLARED REVERSED C CODE>
<DECLARED REVERSED A CODE>
-> The hook 'DECLARED REVERSED':
> Code chunks:
>     A LABEL -> \TYPE {<DECLARED REVERSED A CODE>}
>     B LABEL -> \TYPE {<DECLARED REVERSED B CODE>}
>     C LABEL -> \TYPE {<DECLARED REVERSED C CODE>}
> Document-level (top-level) code (executed first):
>     -> \TYPE {<DECLARED REVERSED TOP-LEVEL>}
> Extra code for next invocation:
>     ---
> Rules:
>     C LABEL|A LABEL with relation <
>     C LABEL|B LABEL with default relation <
> Execution order (after reversal and applying rules):
>     B LABEL, C LABEL, A LABEL.
<recently read> }
l. ...  {DECLARED REVERSED}
============================================================
============================================================
============================================================
TEST 38: OTHER HOOK: with two arguments
============================================================
============================================================
TEST 39: Undeclared WITH TWO ARGUMENTS
============================================================
\UseHookWithArguments{WITH TWO ARGUMENTS}{2}{arg_1}{arg_2}=>
-> The hook 'WITH TWO ARGUMENTS' (2 arguments):
> The hook is empty.
<recently read> }
l. ...  {2}
============================================================
============================================================
TEST 40: WITH TWO ARGUMENTS + TOP-LEVEL
============================================================
\UseHookWithArguments{WITH TWO ARGUMENTS}{2}{arg_1}{arg_2}=>
<WITH TWO ARGUMENTS TOP-LEVEL: /arg arg_1/arg arg_2/>
-> The hook 'WITH TWO ARGUMENTS' (2 arguments):
> Code chunks:
>     ---
> Document-level (top-level) code (executed last):
>     -> \TYPE {<WITH TWO ARGUMENTS TOP-LEVEL: /arg #1/arg #2/>}
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     ---.
<recently read> }
l. ...  {2}
============================================================
============================================================
TEST 41: WITH TWO ARGUMENTS + A LABEL
============================================================
\UseHookWithArguments{WITH TWO ARGUMENTS}{2}{arg_1}{arg_2}=>
<WITH TWO ARGUMENTS A CODE: /arg arg_1/arg arg_2/>
<WITH TWO ARGUMENTS TOP-LEVEL: /arg arg_1/arg arg_2/>
-> The hook 'WITH TWO ARGUMENTS' (2 arguments):
> Code chunks:
>     A LABEL -> \TYPE {<WITH TWO ARGUMENTS A CODE: /arg #1/arg #2/>}
> Document-level (top-level) code (executed last):
>     -> \TYPE {<WITH TWO ARGUMENTS TOP-LEVEL: /arg #1/arg #2/>}
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     A LABEL.
<recently read> }
l. ...  {2}
============================================================
============================================================
TEST 42: WITH TWO ARGUMENTS + B LABEL
============================================================
\UseHookWithArguments{WITH TWO ARGUMENTS}{2}{arg_1}{arg_2}=>
<WITH TWO ARGUMENTS A CODE: /arg arg_1/arg arg_2/>
<WITH TWO ARGUMENTS B CODE: /arg arg_1/arg arg_2/>
<WITH TWO ARGUMENTS TOP-LEVEL: /arg arg_1/arg arg_2/>
-> The hook 'WITH TWO ARGUMENTS' (2 arguments):
> Code chunks:
>     A LABEL -> \TYPE {<WITH TWO ARGUMENTS A CODE: /arg #1/arg #2/>}
>     B LABEL -> \TYPE {<WITH TWO ARGUMENTS B CODE: /arg #1/arg #2/>}
> Document-level (top-level) code (executed last):
>     -> \TYPE {<WITH TWO ARGUMENTS TOP-LEVEL: /arg #1/arg #2/>}
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     A LABEL, B LABEL.
<recently read> }
l. ...  {2}
============================================================
============================================================
TEST 43: WITH TWO ARGUMENTS + C LABEL
============================================================
\UseHookWithArguments{WITH TWO ARGUMENTS}{2}{arg_1}{arg_2}=>
<WITH TWO ARGUMENTS A CODE: /arg arg_1/arg arg_2/>
<WITH TWO ARGUMENTS C CODE: /arg arg_1/arg arg_2/>
<WITH TWO ARGUMENTS B CODE: /arg arg_1/arg arg_2/>
<WITH TWO ARGUMENTS TOP-LEVEL: /arg arg_1/arg arg_2/>
-> The hook 'WITH TWO ARGUMENTS' (2 arguments):
> Code chunks:
>     A LABEL -> \TYPE {<WITH TWO ARGUMENTS A CODE: /arg #1/arg #2/>}
>     B LABEL -> \TYPE {<WITH TWO ARGUMENTS B CODE: /arg #1/arg #2/>}
>     C LABEL -> \TYPE {<WITH TWO ARGUMENTS C CODE: /arg #1/arg #2/>}
> Document-level (top-level) code (executed last):
>     -> \TYPE {<WITH TWO ARGUMENTS TOP-LEVEL: /arg #1/arg #2/>}
> Extra code for next invocation:
>     ---
> Rules:
>     C LABEL|B LABEL with default relation <
> Execution order (after applying rules):
>     A LABEL, C LABEL, B LABEL.
<recently read> }
l. ...  {2}
============================================================
============================================================
TEST 44: WITH TWO ARGUMENTS + NEXT
============================================================
-> The hook 'WITH TWO ARGUMENTS' (2 arguments):
> Code chunks:
>     A LABEL -> \TYPE {<WITH TWO ARGUMENTS A CODE: /arg #1/arg #2/>}
>     B LABEL -> \TYPE {<WITH TWO ARGUMENTS B CODE: /arg #1/arg #2/>}
>     C LABEL -> \TYPE {<WITH TWO ARGUMENTS C CODE: /arg #1/arg #2/>}
> Document-level (top-level) code (executed last):
>     -> \TYPE {<WITH TWO ARGUMENTS TOP-LEVEL: /arg #1/arg #2/>}
> Extra code for next invocation:
>     -> \TYPE {<WITH TWO ARGUMENTS NEXT-ONLY CODE: /arg #1/arg #2/>}
> Rules:
>     C LABEL|B LABEL with default relation <
> Execution order (after applying rules):
>     A LABEL, C LABEL, B LABEL.
<recently read> }
l. ...  {2}
\UseHookWithArguments{WITH TWO ARGUMENTS}{2}{arg_1}{arg_2}=>
<WITH TWO ARGUMENTS A CODE: /arg arg_1/arg arg_2/>
<WITH TWO ARGUMENTS C CODE: /arg arg_1/arg arg_2/>
<WITH TWO ARGUMENTS B CODE: /arg arg_1/arg arg_2/>
<WITH TWO ARGUMENTS TOP-LEVEL: /arg arg_1/arg arg_2/>
<WITH TWO ARGUMENTS NEXT-ONLY CODE: /arg arg_1/arg arg_2/>
-> The hook 'WITH TWO ARGUMENTS' (2 arguments):
> Code chunks:
>     A LABEL -> \TYPE {<WITH TWO ARGUMENTS A CODE: /arg #1/arg #2/>}
>     B LABEL -> \TYPE {<WITH TWO ARGUMENTS B CODE: /arg #1/arg #2/>}
>     C LABEL -> \TYPE {<WITH TWO ARGUMENTS C CODE: /arg #1/arg #2/>}
> Document-level (top-level) code (executed last):
>     -> \TYPE {<WITH TWO ARGUMENTS TOP-LEVEL: /arg #1/arg #2/>}
> Extra code for next invocation:
>     ---
> Rules:
>     C LABEL|B LABEL with default relation <
> Execution order (after applying rules):
>     A LABEL, C LABEL, B LABEL.
<recently read> }
l. ...  {2}
============================================================
============================================================
TEST 45: WITH TWO ARGUMENTS + C LABEL < A LABEL
============================================================
\UseHookWithArguments{WITH TWO ARGUMENTS}{2}{arg_1}{arg_2}=>
<WITH TWO ARGUMENTS C CODE: /arg arg_1/arg arg_2/>
<WITH TWO ARGUMENTS A CODE: /arg arg_1/arg arg_2/>
<WITH TWO ARGUMENTS B CODE: /arg arg_1/arg arg_2/>
<WITH TWO ARGUMENTS TOP-LEVEL: /arg arg_1/arg arg_2/>
-> The hook 'WITH TWO ARGUMENTS' (2 arguments):
> Code chunks:
>     A LABEL -> \TYPE {<WITH TWO ARGUMENTS A CODE: /arg #1/arg #2/>}
>     B LABEL -> \TYPE {<WITH TWO ARGUMENTS B CODE: /arg #1/arg #2/>}
>     C LABEL -> \TYPE {<WITH TWO ARGUMENTS C CODE: /arg #1/arg #2/>}
> Document-level (top-level) code (executed last):
>     -> \TYPE {<WITH TWO ARGUMENTS TOP-LEVEL: /arg #1/arg #2/>}
> Extra code for next invocation:
>     ---
> Rules:
>     C LABEL|A LABEL with relation <
>     C LABEL|B LABEL with default relation <
> Execution order (after applying rules):
>     C LABEL, A LABEL, B LABEL.
<recently read> }
l. ...  {2}
============================================================
============================================================
TEST 46: WITH TWO ARGUMENTS + DEFAULT: B LABEL > C LABEL
============================================================
\UseHookWithArguments{WITH TWO ARGUMENTS}{2}{arg_1}{arg_2}=>
<WITH TWO ARGUMENTS C CODE: /arg arg_1/arg arg_2/>
<WITH TWO ARGUMENTS A CODE: /arg arg_1/arg arg_2/>
<WITH TWO ARGUMENTS B CODE: /arg arg_1/arg arg_2/>
<WITH TWO ARGUMENTS TOP-LEVEL: /arg arg_1/arg arg_2/>
-> The hook 'WITH TWO ARGUMENTS' (2 arguments):
> Code chunks:
>     A LABEL -> \TYPE {<WITH TWO ARGUMENTS A CODE: /arg #1/arg #2/>}
>     B LABEL -> \TYPE {<WITH TWO ARGUMENTS B CODE: /arg #1/arg #2/>}
>     C LABEL -> \TYPE {<WITH TWO ARGUMENTS C CODE: /arg #1/arg #2/>}
> Document-level (top-level) code (executed last):
>     -> \TYPE {<WITH TWO ARGUMENTS TOP-LEVEL: /arg #1/arg #2/>}
> Extra code for next invocation:
>     ---
> Rules:
>     C LABEL|A LABEL with relation <
>     C LABEL|B LABEL with default relation <
> Execution order (after applying rules):
>     C LABEL, A LABEL, B LABEL.
<recently read> }
l. ...  {2}
============================================================
============================================================
============================================================
TEST 47: OTHER HOOK: reversed with two arguments
============================================================
============================================================
TEST 48: Undeclared REVERSED WITH TWO ARGUMENTS
============================================================
\UseHookWithArguments{REVERSED WITH TWO ARGUMENTS}{2}{arg_1}{arg_2}=>
-> The hook 'REVERSED WITH TWO ARGUMENTS' (2 arguments):
> The hook is empty.
<recently read> }
l. ...  {2}
============================================================
============================================================
TEST 49: REVERSED WITH TWO ARGUMENTS + TOP-LEVEL
============================================================
\UseHookWithArguments{REVERSED WITH TWO ARGUMENTS}{2}{arg_1}{arg_2}=>
<REVERSED WITH TWO ARGUMENTS TOP-LEVEL: /arg arg_1/arg arg_2/>
-> The hook 'REVERSED WITH TWO ARGUMENTS' (2 arguments):
> Code chunks:
>     ---
> Document-level (top-level) code (executed first):
>     -> \TYPE {<REVERSED WITH TWO ARGUMENTS TOP-LEVEL: /arg #1/arg #2/>}
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order (after reversal):
>     ---.
<recently read> }
l. ...  {2}
============================================================
============================================================
TEST 50: REVERSED WITH TWO ARGUMENTS + A LABEL
============================================================
\UseHookWithArguments{REVERSED WITH TWO ARGUMENTS}{2}{arg_1}{arg_2}=>
<REVERSED WITH TWO ARGUMENTS TOP-LEVEL: /arg arg_1/arg arg_2/>
<REVERSED WITH TWO ARGUMENTS A CODE: /arg arg_1/arg arg_2/>
-> The hook 'REVERSED WITH TWO ARGUMENTS' (2 arguments):
> Code chunks:
>     A LABEL -> \TYPE {<REVERSED WITH TWO ARGUMENTS A CODE: /arg #1/arg #2/>}
> Document-level (top-level) code (executed first):
>     -> \TYPE {<REVERSED WITH TWO ARGUMENTS TOP-LEVEL: /arg #1/arg #2/>}
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order (after reversal):
>     A LABEL.
<recently read> }
l. ...  {2}
============================================================
============================================================
TEST 51: REVERSED WITH TWO ARGUMENTS + B LABEL
============================================================
\UseHookWithArguments{REVERSED WITH TWO ARGUMENTS}{2}{arg_1}{arg_2}=>
<REVERSED WITH TWO ARGUMENTS TOP-LEVEL: /arg arg_1/arg arg_2/>
<REVERSED WITH TWO ARGUMENTS B CODE: /arg arg_1/arg arg_2/>
<REVERSED WITH TWO ARGUMENTS A CODE: /arg arg_1/arg arg_2/>
-> The hook 'REVERSED WITH TWO ARGUMENTS' (2 arguments):
> Code chunks:
>     A LABEL -> \TYPE {<REVERSED WITH TWO ARGUMENTS A CODE: /arg #1/arg #2/>}
>     B LABEL -> \TYPE {<REVERSED WITH TWO ARGUMENTS B CODE: /arg #1/arg #2/>}
> Document-level (top-level) code (executed first):
>     -> \TYPE {<REVERSED WITH TWO ARGUMENTS TOP-LEVEL: /arg #1/arg #2/>}
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order (after reversal):
>     B LABEL, A LABEL.
<recently read> }
l. ...  {2}
============================================================
============================================================
TEST 52: REVERSED WITH TWO ARGUMENTS + C LABEL
============================================================
\UseHookWithArguments{REVERSED WITH TWO ARGUMENTS}{2}{arg_1}{arg_2}=>
<REVERSED WITH TWO ARGUMENTS TOP-LEVEL: /arg arg_1/arg arg_2/>
<REVERSED WITH TWO ARGUMENTS B CODE: /arg arg_1/arg arg_2/>
<REVERSED WITH TWO ARGUMENTS C CODE: /arg arg_1/arg arg_2/>
<REVERSED WITH TWO ARGUMENTS A CODE: /arg arg_1/arg arg_2/>
-> The hook 'REVERSED WITH TWO ARGUMENTS' (2 arguments):
> Code chunks:
>     A LABEL -> \TYPE {<REVERSED WITH TWO ARGUMENTS A CODE: /arg #1/arg #2/>}
>     B LABEL -> \TYPE {<REVERSED WITH TWO ARGUMENTS B CODE: /arg #1/arg #2/>}
>     C LABEL -> \TYPE {<REVERSED WITH TWO ARGUMENTS C CODE: /arg #1/arg #2/>}
> Document-level (top-level) code (executed first):
>     -> \TYPE {<REVERSED WITH TWO ARGUMENTS TOP-LEVEL: /arg #1/arg #2/>}
> Extra code for next invocation:
>     ---
> Rules:
>     C LABEL|B LABEL with default relation <
> Execution order (after reversal and applying rules):
>     B LABEL, C LABEL, A LABEL.
<recently read> }
l. ...  {2}
============================================================
============================================================
TEST 53: REVERSED WITH TWO ARGUMENTS + NEXT
============================================================
-> The hook 'REVERSED WITH TWO ARGUMENTS' (2 arguments):
> Code chunks:
>     A LABEL -> \TYPE {<REVERSED WITH TWO ARGUMENTS A CODE: /arg #1/arg #2/>}
>     B LABEL -> \TYPE {<REVERSED WITH TWO ARGUMENTS B CODE: /arg #1/arg #2/>}
>     C LABEL -> \TYPE {<REVERSED WITH TWO ARGUMENTS C CODE: /arg #1/arg #2/>}
> Document-level (top-level) code (executed first):
>     -> \TYPE {<REVERSED WITH TWO ARGUMENTS TOP-LEVEL: /arg #1/arg #2/>}
> Extra code for next invocation:
>     -> \TYPE {<REVERSED WITH TWO ARGUMENTS NEXT-ONLY CODE: /arg #1/arg #2/>}
> Rules:
>     C LABEL|B LABEL with default relation <
> Execution order (after reversal and applying rules):
>     B LABEL, C LABEL, A LABEL.
<recently read> }
l. ...  {2}
\UseHookWithArguments{REVERSED WITH TWO ARGUMENTS}{2}{arg_1}{arg_2}=>
<REVERSED WITH TWO ARGUMENTS TOP-LEVEL: /arg arg_1/arg arg_2/>
<REVERSED WITH TWO ARGUMENTS B CODE: /arg arg_1/arg arg_2/>
<REVERSED WITH TWO ARGUMENTS C CODE: /arg arg_1/arg arg_2/>
<REVERSED WITH TWO ARGUMENTS A CODE: /arg arg_1/arg arg_2/>
<REVERSED WITH TWO ARGUMENTS NEXT-ONLY CODE: /arg arg_1/arg arg_2/>
-> The hook 'REVERSED WITH TWO ARGUMENTS' (2 arguments):
> Code chunks:
>     A LABEL -> \TYPE {<REVERSED WITH TWO ARGUMENTS A CODE: /arg #1/arg #2/>}
>     B LABEL -> \TYPE {<REVERSED WITH TWO ARGUMENTS B CODE: /arg #1/arg #2/>}
>     C LABEL -> \TYPE {<REVERSED WITH TWO ARGUMENTS C CODE: /arg #1/arg #2/>}
> Document-level (top-level) code (executed first):
>     -> \TYPE {<REVERSED WITH TWO ARGUMENTS TOP-LEVEL: /arg #1/arg #2/>}
> Extra code for next invocation:
>     ---
> Rules:
>     C LABEL|B LABEL with default relation <
> Execution order (after reversal and applying rules):
>     B LABEL, C LABEL, A LABEL.
<recently read> }
l. ...  {2}
============================================================
============================================================
TEST 54: REVERSED WITH TWO ARGUMENTS + C LABEL < A LABEL
============================================================
\UseHookWithArguments{REVERSED WITH TWO ARGUMENTS}{2}{arg_1}{arg_2}=>
<REVERSED WITH TWO ARGUMENTS TOP-LEVEL: /arg arg_1/arg arg_2/>
<REVERSED WITH TWO ARGUMENTS B CODE: /arg arg_1/arg arg_2/>
<REVERSED WITH TWO ARGUMENTS C CODE: /arg arg_1/arg arg_2/>
<REVERSED WITH TWO ARGUMENTS A CODE: /arg arg_1/arg arg_2/>
-> The hook 'REVERSED WITH TWO ARGUMENTS' (2 arguments):
> Code chunks:
>     A LABEL -> \TYPE {<REVERSED WITH TWO ARGUMENTS A CODE: /arg #1/arg #2/>}
>     B LABEL -> \TYPE {<REVERSED WITH TWO ARGUMENTS B CODE: /arg #1/arg #2/>}
>     C LABEL -> \TYPE {<REVERSED WITH TWO ARGUMENTS C CODE: /arg #1/arg #2/>}
> Document-level (top-level) code (executed first):
>     -> \TYPE {<REVERSED WITH TWO ARGUMENTS TOP-LEVEL: /arg #1/arg #2/>}
> Extra code for next invocation:
>     ---
> Rules:
>     C LABEL|A LABEL with relation <
>     C LABEL|B LABEL with default relation <
> Execution order (after reversal and applying rules):
>     B LABEL, C LABEL, A LABEL.
<recently read> }
l. ...  {2}
============================================================
============================================================
TEST 55: REVERSED WITH TWO ARGUMENTS + DEFAULT: B LABEL > C LABEL
============================================================
\UseHookWithArguments{REVERSED WITH TWO ARGUMENTS}{2}{arg_1}{arg_2}=>
<REVERSED WITH TWO ARGUMENTS TOP-LEVEL: /arg arg_1/arg arg_2/>
<REVERSED WITH TWO ARGUMENTS B CODE: /arg arg_1/arg arg_2/>
<REVERSED WITH TWO ARGUMENTS C CODE: /arg arg_1/arg arg_2/>
<REVERSED WITH TWO ARGUMENTS A CODE: /arg arg_1/arg arg_2/>
-> The hook 'REVERSED WITH TWO ARGUMENTS' (2 arguments):
> Code chunks:
>     A LABEL -> \TYPE {<REVERSED WITH TWO ARGUMENTS A CODE: /arg #1/arg #2/>}
>     B LABEL -> \TYPE {<REVERSED WITH TWO ARGUMENTS B CODE: /arg #1/arg #2/>}
>     C LABEL -> \TYPE {<REVERSED WITH TWO ARGUMENTS C CODE: /arg #1/arg #2/>}
> Document-level (top-level) code (executed first):
>     -> \TYPE {<REVERSED WITH TWO ARGUMENTS TOP-LEVEL: /arg #1/arg #2/>}
> Extra code for next invocation:
>     ---
> Rules:
>     C LABEL|A LABEL with relation <
>     C LABEL|B LABEL with default relation <
> Execution order (after reversal and applying rules):
>     B LABEL, C LABEL, A LABEL.
<recently read> }
l. ...  {2}
============================================================
============================================================
============================================================
TEST 56: After \begin {document}
============================================================
============================================================
TEST 57: Commands
============================================================
<cmdA BEFORE>
<cmdA BODY>
<cmdA AFTER>
============================================================
<cmdB BEFORE>
<cmdB BODY>
<cmdB AFTER>
============================================================
<cmdTwoArgsA BEFORE: /argA 1/argA 2/>
<cmdTwoArgsA BODY: /argA 1/argA 2/>
<cmdTwoArgsA AFTER: /argA 1/argA 2/>
============================================================
<cmdTwoArgsB BEFORE: /argB 1/argB 2/>
<cmdTwoArgsB BODY: /argB 1/argB 2/>
<cmdTwoArgsB AFTER: /argB 1/argB 2/>
============================================================
============================================================
!!!! If this test changes the documentation needs updating !!!!
